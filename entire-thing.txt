Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Alert
You'll still get emails from people who accidentally deleted their account, but at least you tried.

Refund payment
import { Alert, AlertActions, AlertDescription, AlertTitle } from '@/components/alert'
import { Button } from '@/components/button'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Refund payment
      </Button>
      <Alert open={isOpen} onClose={setIsOpen}>
        <AlertTitle>Are you sure you want to refund this payment?</AlertTitle>
        <AlertDescription>
          The refund will be reflected in the customer’s bank account 2 to 3 business days after processing.
        </AlertDescription>
        <AlertActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>Refund</Button>
        </AlertActions>
      </Alert>
    </>
  )
}
Component API
Prop	Default	Description
Alert extends the Headless UI <Dialog> component
open	-	Whether the alert is open or not.
onClose	-	Called when the alert is dismissed.
size	md	The max-width of the alert.
AlertTitle extends the Headless UI <DialogTitle> component
This component does not expose any component-specific props.
AlertDescription extends the Headless UI <Description> component
This component does not expose any component-specific props.
AlertBody extends the JSX <div> element
This component does not expose any component-specific props.
AlertActions extends the JSX <div> element
This component does not expose any component-specific props.
Examples
Basic example
Use the Alert, AlertTitle, AlertDescription, and AlertActions components to build an alert:

Refund payment
import { Alert, AlertActions, AlertDescription, AlertTitle } from '@/components/alert'
import { Button } from '@/components/button'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Refund payment
      </Button>
      <Alert open={isOpen} onClose={setIsOpen}>
        <AlertTitle>Are you sure you want to refund this payment?</AlertTitle>
        <AlertDescription>
          The refund will be reflected in the customer’s bank account 2 to 3 business days after processing.
        </AlertDescription>
        <AlertActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>Refund</Button>
        </AlertActions>
      </Alert>
    </>
  )
}
Alert width
Use the size prop on the Alert component to control the max-width of the alert dialog:

Refund payment
import { Alert, AlertActions, AlertDescription, AlertTitle } from '@/components/alert'
import { Button } from '@/components/button'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Refund payment
      </Button>
      <Alert open={isOpen} onClose={setIsOpen} size="lg">
        <AlertTitle>Are you sure you want to refund this payment?</AlertTitle>
        <AlertDescription>
          The refund will be reflected in the customer’s bank account 2 to 3 business days after processing.
        </AlertDescription>
        <AlertActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>Refund</Button>
        </AlertActions>
      </Alert>
    </>
  )
}
Available size options include xs, sm, md, lg, xl, 2xl, 3xl, 4xl, and 5xl.

With body
Add content to your alert using the AlertBody component:

Delete repository
import { Alert, AlertActions, AlertBody, AlertDescription, AlertTitle } from '@/components/alert'
import { Button } from '@/components/button'
import { Input } from '@/components/input'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Delete repository
      </Button>
      <Alert open={isOpen} onClose={setIsOpen} size="sm">
        <AlertTitle>Verification required</AlertTitle>
        <AlertDescription>To continue, please enter your password.</AlertDescription>
        <AlertBody>
          <Input name="password" type="password" aria-label="Password" placeholder="•••••••" />
        </AlertBody>
        <AlertActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>Continue</Button>
        </AlertActions>
      </Alert>
    </>
  )
}
Auto-focusing elements
Add the autoFocus prop to any form control or button in the dialog to automatically focus it when the dialog opens:

Delete repository
import { Alert, AlertActions, AlertBody, AlertDescription, AlertTitle } from '@/components/alert'
import { Button } from '@/components/button'
import { Input } from '@/components/input'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Delete repository
      </Button>
      <Alert open={isOpen} onClose={setIsOpen} size="sm">
        <AlertTitle>Verification required</AlertTitle>
        <AlertDescription>To continue, please enter your password.</AlertDescription>
        <AlertBody>
          <Input autoFocus name="password" type="password" aria-label="Password" placeholder="•••••••" />
        </AlertBody>
        <AlertActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>Continue</Button>
        </AlertActions>
      </Alert>
    </>
  )
}
On this page
Component API
Examples
Basic example
Alert width
With body
Auto-focusing elements
Alert - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Avatar
It's more than just an image with a border radius, I promise.




import { Avatar } from '@/components/avatar'

function Example({ user }) {
  return (
    <>
      <Avatar className="size-6" src={user.avatarUrl} />
      <Avatar className="size-8" src={user.avatarUrl} />
      <Avatar className="size-10" src={user.avatarUrl} />
    </>
  )
}
Component API
Prop	Default	Description
Avatar extends the JSX <span> element
src	-	The URL of the avatar image.
square	false	Whether to make the avatar square.
initials	-	The initials to use when no src is provided.
AvatarButton extends the Headless UI Button component or the Link component
src	-	The URL of the avatar image.
square	false	Whether to make the avatar square.
initials	-	The initials to use when no src is provided.
href	-	The target URL when using the button as a link.
Examples
Basic example
Use the Avatar component along with a size-* utility to render an avatar image:




import { Avatar } from '@/components/avatar'

function Example({ user }) {
  return (
    <>
      <Avatar className="size-6" src={user.avatarUrl} />
      <Avatar className="size-8" src={user.avatarUrl} />
      <Avatar className="size-10" src={user.avatarUrl} />
    </>
  )
}
With initials
Use the initials prop to render an avatar with initials:

import { Avatar } from '@/components/avatar'

function Example() {
  return (
    <>
      <Avatar initials="tw" className="size-6 bg-zinc-900 text-white dark:bg-white dark:text-black" />
      <Avatar initials="tw" className="size-8 bg-zinc-900 text-white dark:bg-white dark:text-black" />
      <Avatar initials="tw" className="size-10 bg-zinc-900 text-white dark:bg-white dark:text-black" />
    </>
  )
}
Be sure to include bg-{color} and text-{color} utilities for both light mode and dark mode.

With initials as fallback
Include both the src and initials props to show the initials as a fallback while the avatar image loads:




import { Avatar } from '@/components/avatar'

function Example({ user }) {
  return (
    <>
      <Avatar src={user.avatarUrl} initials={user.initials} className="size-6 bg-purple-500 text-white" />
      <Avatar src={user.avatarUrl} initials={user.initials} className="size-8 bg-purple-500 text-white" />
      <Avatar src={user.avatarUrl} initials={user.initials} className="size-10 bg-purple-500 text-white" />
    </>
  )
}
Square avatars
Use the square prop to render a square avatar:


import { Avatar } from '@/components/avatar'

function Example({ user }) {
  return (
    <>
      <Avatar square className="size-8" src={user.avatarUrl} />
      <Avatar square initials={user.initials} className="size-8 bg-zinc-900 text-white dark:bg-white dark:text-black" />
    </>
  )
}
Avatar groups
Use utility classes to overlap a list of avatars and style them as a group:





import { Avatar } from '@/components/avatar'

function Example({ users }) {
  return (
    <div className="flex items-center justify-center -space-x-2">
      {users.map((user) => (
        <Avatar src={user.avatarUrl} className="size-8 ring-2 ring-white dark:ring-zinc-900" />
      ))}
    </div>
  )
}
Use the ring-{color} and dark:ring-{color} utilities to match the notched area with your background color.

Using as buttons
Use the AvatarButton component to render an avatar as a button:





import { AvatarButton } from '@/components/avatar'

function Example({ user }) {
  return (
    <>
      <AvatarButton className="size-8" src={user.avatarUrl} />
      <AvatarButton square className="size-8" src={user.avatarUrl} />
    </>
  )
}
Using as links
Use the AvatarButton component with the href prop to render an avatar as a link:



import { AvatarButton } from '@/components/avatar'

function Example({ user }) {
  return (
    <>
      <AvatarButton href={user.url} className="size-8" src={user.avatarUrl} />
      <AvatarButton square href={user.url} className="size-8" src={user.avatarUrl} />
    </>
  )
}
On this page
Component API
Examples
Basic example
With initials
With initials as fallback
Square avatars
Avatar groups
Using as buttons
Using as links
Avatar - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Badge
Eventually this custom CMS you're probably building is going to need tags.

documentation
help wanted
bug
import { Badge } from '@/components/badge'

function Example() {
  return (
    <div className="flex gap-3">
      <Badge color="lime">documentation</Badge>
      <Badge color="purple">help wanted</Badge>
      <Badge color="rose">bug</Badge>
    </div>
  )
}
Component API
Prop	Default	Description
Badge extends the JSX <span> element
color	zinc	The color of the badge.
BadgeButton extends the Headless UI Button component or the Link component
color	zinc	The color of the badge.
href	-	The target URL when using the button as a link.
Examples
Badge colors
Use the color prop to set the color of the badge:

documentation
help wanted
bug
import { Badge } from '@/components/badge'

function Example() {
  return (
    <div className="flex gap-3">
      <Badge color="lime">documentation</Badge>
      <Badge color="purple">help wanted</Badge>
      <Badge color="rose">bug</Badge>
    </div>
  )
}
For a full list of included color variants, check out the color reference.

Using as buttons
Use the BadgeButton component to render a badge as a button:


documentation
import { BadgeButton } from '@/components/badge'

function Example() {
  return <BadgeButton>documentation</BadgeButton>
}
Using as links
Use the BadgeButton component with the href prop to render a badge as a link:

documentation
import { BadgeButton } from '@/components/badge'

function Example() {
  return <BadgeButton href="#">documentation</BadgeButton>
}
Appendix
Color reference
Catalyst includes 18 badge colors that automatically change between light and dark modes to maintain a consistent level of contrast:

Color	Example
red	
label
orange	
label
amber	
label
yellow	
label
lime	
label
green	
label
emerald	
label
teal	
label
cyan	
label
sky	
label
blue	
label
indigo	
label
violet	
label
purple	
label
fuchsia	
label
pink	
label
rose	
label
zinc	
label
On this page
Component API
Examples
Badge colors
Using as buttons
Using as links
Appendix
Color reference
Badge - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Button
You know, those things you click to do just about anything in a web application.

Save changes
import { Button } from '@/components/button'

function Example() {
  return <Button>Save changes</Button>
}
Component API
Prop	Default	Description
Button extends the Headless UI Button component or the Link component
type	button	The button type.
color	dark/zinc	The color variant the button should use.
outline	false	Whether to use the outline button style.
plain	false	Whether to use the plain button style.
disabled	false	Whether or not to disable the button.
href	-	The target URL when using the button as a link.
Examples
Button colors
Use the color prop to set the button color:

Save changes
import { Button } from '@/components/button'

function Example() {
  return <Button color="cyan">Save changes</Button>
}
For a full list of included color variants, check out the solid color reference.

Outline buttons
Use the outline prop for a secondary button style with no shadows or background color:

Save draft
import { Button } from '@/components/button'

function Example() {
  return <Button outline>Save draft</Button>
}
Plain buttons
Use the plain prop for a simple button style with no border, shadows or background color:

Save draft
import { Button } from '@/components/button'

function Example() {
  return <Button plain>Save draft</Button>
}
Disabled states
Use the disabled prop to disable a button and apply disabled styles:

Save changes
import { Button } from '@/components/button'

function Example() {
  return <Button disabled>Save changes</Button>
}
The disabled prop is not supported when using the href prop.

With icon
Icons may be place at the start or end of a button:


Add item

import { Button } from '@/components/button'
import { PlusIcon } from '@heroicons/react/16/solid'

function Example() {
  return (
    <Button>
      <PlusIcon />
      Add item
    </Button>
  )
}
The icon prop accepts both component constructors like PlusIcon, as well as component instances like <PlusIcon />.

The Button component is designed to work best with 16×16 icons.

If you're using your own custom icons, make sure they include the data-slot="icon" prop so they receive the correct styles.

Using as a link
Add the href prop to render a Link that has the same visual styling as a button:

Get started
import { Button } from '@/components/button'

function Example() {
  return <Button href="/get-started">Get started</Button>
}
Link buttons support all of the same props as regular buttons except disabled.

Appendix
Solid color reference
By default, Catalyst includes three adaptive color variants that automatically change color between light and dark modes to maintain a consistent level of contrast:

Color	Example
dark/zinc	Submit
light	Submit
dark/white	Submit
Catalyst also includes 20 solid colors that don't change outside of subtle global changes we make to all buttons in dark mode:

Color	Example
dark	Submit
zinc	Submit
white	Submit
red	Submit
orange	Submit
amber	Submit
yellow	Submit
lime	Submit
green	Submit
emerald	Submit
teal	Submit
cyan	Submit
sky	Submit
blue	Submit
indigo	Submit
violet	Submit
purple	Submit
fuchsia	Submit
pink	Submit
rose	Submit
On this page
Component API
Examples
Button colors
Outline buttons
Plain buttons
Disabled states
With icon
Using as a link
Appendix
Solid color reference
Button - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Checkbox
People need to be able to accept the terms and conditions they don't read somehow.


Discoverability
Decide where your events can be found across the web.

Make this event visible on your profile.

Allow others to embed your event details on their own site.

import { Checkbox, CheckboxField, CheckboxGroup } from '@/components/checkbox'
import { Description, Fieldset, Label, Legend } from '@/components/fieldset'
import { Text } from '@/components/text'

function Example() {
  return (
    <Fieldset>
      <Legend>Discoverability</Legend>
      <Text>Decide where your events can be found across the web.</Text>
      <CheckboxGroup>
        <CheckboxField>
          <Checkbox name="discoverability" value="show_on_events_page" defaultChecked />
          <Label>Show on events page</Label>
          <Description>Make this event visible on your profile.</Description>
        </CheckboxField>
        <CheckboxField>
          <Checkbox name="discoverability" value="allow_embedding" />
          <Label>Allow embedding</Label>
          <Description>Allow others to embed your event details on their own site.</Description>
        </CheckboxField>
      </CheckboxGroup>
    </Fieldset>
  )
}
Component API
Prop	Default	Description
Checkbox extends the Headless UI <Checkbox> component
color	dark/zinc	The color variant the checkbox should use.
disabled	false	Whether or not to disable the checkbox.
name	-	The name to use when submitting an HTML form.
value	-	The value to use when submitting an HTML form.
defaultChecked	-	The initial state of the checkbox.
checked	-	The controlled state of the checkbox.
onChange	-	Handler to call when the checkbox state changes.
CheckboxField extends the Headless UI <Field> component
disabled	false	Whether or not to disable the entire field.
CheckboxGroup extends the JSX <div> element
This component does not expose any component-specific props.
Label extends the Headless UI <Label> component
This component does not expose any component-specific props.
Description extends the Headless UI <Description> component
This component does not expose any component-specific props.
Examples
Basic example
Use the Checkbox component on its own to render a standalone checkbox without an associated Label component:

import { Checkbox } from '@/components/checkbox'

function Example() {
  return <Checkbox aria-label="Allow embedding" name="allow_embedding" />
}
Make sure to provide an aria-label for assistive technology, or connect the Checkbox to your own <label> element using an id.

With label
Wrap a Label and Checkbox with the CheckboxField component to automatically associate them using a generated ID:

import { Checkbox, CheckboxField } from '@/components/checkbox'
import { Label } from '@/components/fieldset'

function Example() {
  return (
    <CheckboxField>
      <Checkbox name="allow_embedding" />
      <Label>Allow embedding</Label>
    </CheckboxField>
  )
}
With description
Use the CheckboxField, Label, and Description components to add a description below the checkbox:

Allow others to embed your event details on their own site.

import { Checkbox, CheckboxField } from '@/components/checkbox'
import { Description, Label } from '@/components/fieldset'

function Example() {
  return (
    <CheckboxField>
      <Checkbox name="allow_embedding" />
      <Label>Allow embedding</Label>
      <Description>Allow others to embed your event details on their own site.</Description>
    </CheckboxField>
  )
}
With custom layout
Use the unstyled Field component from @headlessui/react directly instead of the styled CheckboxField component to implement a custom layout:

import { Checkbox } from '@/components/checkbox'
import { Label } from '@/components/fieldset'
import * as Headless from '@headlessui/react'

function Example() {
  return (
    <Headless.Field className="flex items-center justify-between gap-4">
      <Label>Allow embedding</Label>
      <Checkbox name="allow_embedding" />
    </Headless.Field>
  )
}
Using the unstyled Field component will ensure important accessibility features are still handled for you like generating IDs and associating elements using aria-* attributes.

With accent color
Use the color prop to choose a different accent color for a checkbox:

import { Checkbox } from '@/components/checkbox'

function Example() {
  return <Checkbox color="sky" defaultChecked />
}
For a full list of included color variants, check out the checkbox color reference.

With custom value
Use the value prop to specify a custom value to use when submitting a form:

import { Checkbox } from '@/components/checkbox'

function Example() {
  return <Checkbox name="embed" value="allow" />
}
Default checked state
Use the defaultChecked prop to set the default state when using the Checkbox as an uncontrolled component:

import { Checkbox } from '@/components/checkbox'

function Example() {
  return <Checkbox defaultChecked />
}
Indeterminate state
Use the indeterminate prop to indicate that the Checkbox is in an indeterminate state, neither toggled on nor off:

import { Checkbox, CheckboxField, CheckboxGroup } from '@/components/checkbox'
import { Label } from '@/components/fieldset'
import { useState } from 'react'

const options = ['Show on events page', 'Allow embedding']

function Example() {
  let [selected, setSelected] = useState(['Show on events page'])

  return (
    <CheckboxGroup role="group" aria-label="Discoverability">
      <CheckboxField>
        <Checkbox
          checked={selected.length > 0}
          indeterminate={selected.length !== options.length}
          onChange={(checked) => setSelected(checked ? options : [])}
        />
        <Label>Select all</Label>
      </CheckboxField>

      {options.map((option) => (
        <CheckboxField key={option}>
          <Checkbox
            name={option}
            checked={selected.includes(option)}
            onChange={(checked) => {
              return setSelected((pending) => {
                return checked ? [...pending, option] : pending.filter((item) => item !== option)
              })
            }}
          />
          <Label>{option}</Label>
        </CheckboxField>
      ))}
    </CheckboxGroup>
  )
}
Controlled component
Use the checked and onChange props to use a Checkbox as a controlled component:

import { Checkbox } from '@/components/checkbox'
import { useState } from 'react'

function Example() {
  let [checked, setChecked] = useState(true)

  return <Checkbox checked={checked} onChange={setChecked} />
}
Multiple checkboxes
Use the CheckboxGroup component to stack multiple checkboxes together in a list:

Make this event visible on your profile.

Allow others to embed your event details on their own site.

import { Checkbox, CheckboxField, CheckboxGroup } from '@/components/checkbox'
import { Description, Label } from '@/components/fieldset'

function Example() {
  return (
    <CheckboxGroup>
      <CheckboxField>
        <Checkbox name="show_on_events_page" defaultChecked />
        <Label>Show on events page</Label>
        <Description>Make this event visible on your profile.</Description>
      </CheckboxField>
      <CheckboxField>
        <Checkbox name="allow_embedding" />
        <Label>Allow embedding</Label>
        <Description>Allow others to embed your event details on their own site.</Description>
      </CheckboxField>
    </CheckboxGroup>
  )
}
You can optionally add role="group" and an aria-label to the CheckboxGroup if all of the checkboxes are related and you want them announced to assistive technology as a group.

With fieldset
Use the Fieldset, Legend, and Text components to add a title and description to a group of checkboxes:


Discoverability
Decide where your events can be found across the web.

Make this event visible on your profile.

Allow others to embed your event details on their own site.

import { Checkbox, CheckboxField, CheckboxGroup } from '@/components/checkbox'
import { Description, Fieldset, Label, Legend } from '@/components/fieldset'
import { Text } from '@/components/text'

function Example() {
  return (
    <Fieldset>
      <Legend>Discoverability</Legend>
      <Text>Decide where your events can be found across the web.</Text>
      <CheckboxGroup>
        <CheckboxField>
          <Checkbox name="discoverability" value="show_on_events_page" defaultChecked />
          <Label>Show on events page</Label>
          <Description>Make this event visible on your profile.</Description>
        </CheckboxField>
        <CheckboxField>
          <Checkbox name="discoverability" value="allow_embedding" />
          <Label>Allow embedding</Label>
          <Description>Allow others to embed your event details on their own site.</Description>
        </CheckboxField>
      </CheckboxGroup>
    </Fieldset>
  )
}
Disabled state
Add the disabled prop to a Checkbox or CheckboxField component to disable it:


Discoverability
Decide where your events can be found across the web.

Make this event visible on your profile.

Allow others to embed your event details on their own site.

import { Checkbox, CheckboxField, CheckboxGroup } from '@/components/checkbox'
import { Description, Fieldset, Label, Legend } from '@/components/fieldset'
import { Text } from '@/components/text'

function Example() {
  return (
    <Fieldset>
      <Legend>Discoverability</Legend>
      <Text>Decide where your events can be found across the web.</Text>
      <CheckboxGroup>
        <CheckboxField>
          <Checkbox name="discoverability" value="show_on_events_page" />
          <Label>Show on events page</Label>
          <Description>Make this event visible on your profile.</Description>
        </CheckboxField>
        <CheckboxField disabled>
          <Checkbox name="discoverability" value="allow_embedding" />
          <Label>Allow embedding</Label>
          <Description>Allow others to embed your event details on their own site.</Description>
        </CheckboxField>
      </CheckboxGroup>
    </Fieldset>
  )
}
You can also add the disabled prop to a Fieldset to disable the entire fieldset.

Appendix
Color reference
By default, Catalyst includes two adaptive color variants that automatically change color between light and dark modes to maintain a consistent level of contrast:

Color	Example
dark/zinc	
dark/white	
Catalyst also includes 20 solid colors that don't change outside of subtle global changes we make to all checkboxes in dark mode:

Color	Example
dark	
zinc	
white	
red	
orange	
amber	
yellow	
lime	
green	
emerald	
teal	
cyan	
sky	
blue	
indigo	
violet	
purple	
fuchsia	
pink	
rose	
On this page
Component API
Examples
Basic example
With label
With description
With custom layout
With accent color
With custom value
Default checked state
Indeterminate state
Controlled component
Multiple checkboxes
With fieldset
Disabled state
Appendix
Color reference
Checkbox - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Description list
For when you need to take the data from just one table row and somehow turn it into its own entire table to keep the page from feeling too empty.

Customer
Michael Foster
Event
Bear Hug: Live in Concert
Amount
$150.00 USD
Amount after exchange rate
US$150.00 → CA$199.79
Fee
$4.79 USD
Net
$1,955.00
import { DescriptionDetails, DescriptionList, DescriptionTerm } from '@/components/description-list'

function Example() {
  return (
    <DescriptionList>
      <DescriptionTerm>Customer</DescriptionTerm>
      <DescriptionDetails>Michael Foster</DescriptionDetails>

      <DescriptionTerm>Event</DescriptionTerm>
      <DescriptionDetails>Bear Hug: Live in Concert</DescriptionDetails>

      <DescriptionTerm>Amount</DescriptionTerm>
      <DescriptionDetails>$150.00 USD</DescriptionDetails>

      <DescriptionTerm>Amount after exchange rate</DescriptionTerm>
      <DescriptionDetails>US$150.00 &rarr; CA$199.79</DescriptionDetails>

      <DescriptionTerm>Fee</DescriptionTerm>
      <DescriptionDetails>$4.79 USD</DescriptionDetails>

      <DescriptionTerm>Net</DescriptionTerm>
      <DescriptionDetails>$1,955.00</DescriptionDetails>
    </DescriptionList>
  )
}
Component API
Prop	Default	Description
DescriptionList extends the JSX <dl> element
This component does not expose any component-specific props.
DescriptionTerm extends the JSX <dt> element
This component does not expose any component-specific props.
DescriptionDetails extends the JSX <dd> element
This component does not expose any component-specific props.
Examples
Basic example
Use the DescriptionList, DescriptionTerm, and DescriptionDetails components to build a description list:

Customer
Leslie Alexander
Email
leslie.alexander@example.com
Access
Admin
import { DescriptionDetails, DescriptionList, DescriptionTerm } from '@/components/description-list'

function Example() {
  return (
    <DescriptionList>
      <DescriptionTerm>Customer</DescriptionTerm>
      <DescriptionDetails>Leslie Alexander</DescriptionDetails>

      <DescriptionTerm>Email</DescriptionTerm>
      <DescriptionDetails>leslie.alexander@example.com</DescriptionDetails>

      <DescriptionTerm>Access</DescriptionTerm>
      <DescriptionDetails>Admin</DescriptionDetails>
    </DescriptionList>
  )
}
With heading
Use the Subheading component to add a heading to the description list:

Order #1011
Customer
Michael Foster
Event
Bear Hug: Live in Concert
Amount
$150.00 USD
Amount after exchange rate
US$150.00 → CA$199.79
Fee
$4.79 USD
Net
$1,955.00
import { DescriptionDetails, DescriptionList, DescriptionTerm } from '@/components/description-list'
import { Subheading } from '@/components/heading'

function Example() {
  return (
    <>
      <Subheading>Order #1011</Subheading>
      <DescriptionList className="mt-4">
        <DescriptionTerm>Customer</DescriptionTerm>
        <DescriptionDetails>Michael Foster</DescriptionDetails>

        <DescriptionTerm>Event</DescriptionTerm>
        <DescriptionDetails>Bear Hug: Live in Concert</DescriptionDetails>

        <DescriptionTerm>Amount</DescriptionTerm>
        <DescriptionDetails>$150.00 USD</DescriptionDetails>

        <DescriptionTerm>Amount after exchange rate</DescriptionTerm>
        <DescriptionDetails>US$150.00 &rarr; CA$199.79</DescriptionDetails>

        <DescriptionTerm>Fee</DescriptionTerm>
        <DescriptionDetails>$4.79 USD</DescriptionDetails>

        <DescriptionTerm>Net</DescriptionTerm>
        <DescriptionDetails>$1,955.00</DescriptionDetails>
      </DescriptionList>
    </>
  )
}
On this page
Component API
Examples
Basic example
With heading
Description list - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Dialog
Back in my day we used to just put this sort of content on a separate page.

Refund payment
import { Button } from '@/components/button'
import { Dialog, DialogActions, DialogBody, DialogDescription, DialogTitle } from '@/components/dialog'
import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Refund payment
      </Button>
      <Dialog open={isOpen} onClose={setIsOpen}>
        <DialogTitle>Refund payment</DialogTitle>
        <DialogDescription>
          The refund will be reflected in the customer’s bank account 2 to 3 business days after processing.
        </DialogDescription>
        <DialogBody>
          <Field>
            <Label>Amount</Label>
            <Input name="amount" placeholder="$0.00" />
          </Field>
        </DialogBody>
        <DialogActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>Refund</Button>
        </DialogActions>
      </Dialog>
    </>
  )
}
Component API
Prop	Default	Description
Dialog extends the Headless UI <Dialog> component
open	-	Whether the dialog is open or not.
onClose	-	Called when the dialog is dismissed.
size	lg	The max-width of the dialog.
DialogTitle extends the Headless UI <DialogTitle> component
This component does not expose any component-specific props.
DialogDescription extends the Headless UI <Description> component
This component does not expose any component-specific props.
DialogBody extends the JSX <div> element
This component does not expose any component-specific props.
DialogActions extends the JSX <div> element
This component does not expose any component-specific props.
Examples
Basic example
Use the Dialog, DialogTitle, DialogDescription, DialogBody, and DialogActions components to build a dialog:

Refund payment
import { Button } from '@/components/button'
import { Dialog, DialogActions, DialogBody, DialogDescription, DialogTitle } from '@/components/dialog'
import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Refund payment
      </Button>
      <Dialog open={isOpen} onClose={setIsOpen}>
        <DialogTitle>Refund payment</DialogTitle>
        <DialogDescription>
          The refund will be reflected in the customer’s bank account 2 to 3 business days after processing.
        </DialogDescription>
        <DialogBody>
          <Field>
            <Label>Amount</Label>
            <Input name="amount" placeholder="$0.00" />
          </Field>
        </DialogBody>
        <DialogActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>Refund</Button>
        </DialogActions>
      </Dialog>
    </>
  )
}
Dialogs are controlled components and can be opened and closed using the open and onClose props.

Dialog width
Use the size prop on the Dialog component to control the max-width of the dialog:

Refund payment
import { Button } from '@/components/button'
import { Dialog, DialogActions, DialogBody, DialogDescription, DialogTitle } from '@/components/dialog'
import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Refund payment
      </Button>
      <Dialog size="xl" open={isOpen} onClose={setIsOpen}>
        <DialogTitle>Refund payment</DialogTitle>
        <DialogDescription>
          The refund will be reflected in the customer’s bank account 2 to 3 business days after processing.
        </DialogDescription>
        <DialogBody>
          <Field>
            <Label>Amount</Label>
            <Input name="amount" placeholder="$0.00" />
          </Field>
        </DialogBody>
        <DialogActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>Refund</Button>
        </DialogActions>
      </Dialog>
    </>
  )
}
Available size options include xs, sm, md, lg, xl, 2xl, 3xl, 4xl, and 5xl.

Opening from dropdown
When opening a Dialog from a dropdown menu, make sure the dialog is rendered outside of the dropdown:

Options
import { Button } from '@/components/button'
import { Dialog, DialogActions, DialogBody, DialogDescription, DialogTitle } from '@/components/dialog'
import { Dropdown, DropdownButton, DropdownItem, DropdownMenu } from '@/components/dropdown'
import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'
import { ChevronDownIcon } from '@heroicons/react/16/solid'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Dropdown>
        <DropdownButton outline>
          Options
          <ChevronDownIcon />
        </DropdownButton>
        <DropdownMenu>
          <DropdownItem onClick={() => setIsOpen(true)}>Refund</DropdownItem>
          <DropdownItem href="#" disabled>
            Download
          </DropdownItem>
        </DropdownMenu>
      </Dropdown>

      <Dialog open={isOpen} onClose={setIsOpen}>
        <DialogTitle>Refund payment</DialogTitle>
        <DialogDescription>
          The refund will be reflected in the customer’s bank account 2 to 3 business days after processing.
        </DialogDescription>
        <DialogBody>
          <Field>
            <Label>Amount</Label>
            <Input name="amount" placeholder="$0.00" />
          </Field>
        </DialogBody>
        <DialogActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>Refund</Button>
        </DialogActions>
      </Dialog>
    </>
  )
}
If your Dialog is placed inside the dropdown, it won't open as expected because it will be immediately unmounted when the dropdown menu closes.

Auto-focusing elements
Add the autoFocus prop to any form control or button in the dialog to automatically focus it when the dialog opens:

Refund payment
import { Button } from '@/components/button'
import { Dialog, DialogActions, DialogBody, DialogDescription, DialogTitle } from '@/components/dialog'
import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Refund payment
      </Button>
      <Dialog open={isOpen} onClose={setIsOpen}>
        <DialogTitle>Refund payment</DialogTitle>
        <DialogDescription>
          The refund will be reflected in the customer’s bank account 2 to 3 business days after processing.
        </DialogDescription>
        <DialogBody>
          <Field>
            <Label>Amount</Label>
            <Input name="amount" placeholder="$0.00" autoFocus />
          </Field>
        </DialogBody>
        <DialogActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>Refund</Button>
        </DialogActions>
      </Dialog>
    </>
  )
}
Elements will not be automatically focused on touch devices to prevent layout shifts caused by the software keyboard opening.

With scrolling content
Dialogs automatically become scrollable if their content is taller than the viewport:

Agree to terms
import { Button } from '@/components/button'
import { Dialog, DialogActions, DialogBody, DialogDescription, DialogTitle } from '@/components/dialog'
import { useState } from 'react'

function Example() {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Agree to terms
      </Button>
      <Dialog open={isOpen} onClose={setIsOpen} size="xl">
        <DialogTitle>Terms and conditions</DialogTitle>
        <DialogDescription>Please agree to the following terms and conditions to continue.</DialogDescription>
        <DialogBody className="text-sm/6 text-zinc-900 dark:text-white">
          <p className="mt-4">
            By accessing and using our services, you are agreeing to these terms, which have been meticulously tailored
            for our benefit and your compliance.
          </p>
          <h3 className="mt-6 font-bold">Comprehensive Acceptance of Terms</h3>
          <p className="mt-4">
            Your engagement with our application signifies your irrevocable acceptance of these terms, which are binding
            regardless of your awareness or understanding of them. Your continued use acts as a silent nod of agreement
            to any and all stipulations outlined herein.
          </p>
          {/* ... */}
        </DialogBody>
        <DialogActions>
          <Button plain onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button onClick={() => setIsOpen(false)}>I agree</Button>
        </DialogActions>
      </Dialog>
    </>
  )
}
On this page
Component API
Examples
Basic example
Dialog width
Opening from dropdown
Auto-focusing elements
With scrolling content
Dialog - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Divider
It's a line.

import { Divider } from '@/components/divider'

function Example() {
  return <Divider />
}
Component API
Prop	Default	Description
Divider extends the JSX <hr> element
soft	false	Whether the divider should use a softer color.
Examples
Basic example
Use the Divider component to add a horizontal rule between items:

import { Divider } from '@/components/divider'

function Example() {
  return <Divider />
}
With reduced contrast
Use the soft prop for secondary dividers:

import { Divider } from '@/components/divider'

function Example() {
  return <Divider soft />
}
With spacing
Use utility classes like my-* to control the vertical spacing around a divider:

import { Divider } from '@/components/divider'

function Example() {
  return <Divider className="my-6" />
}
On this page
Component API
Examples
Basic example
With reduced contrast
With spacing
Divider - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Dropdown
Probably the number one reason you're looking for a UI kit in the first place.

Options
import { Dropdown, DropdownButton, DropdownItem, DropdownMenu } from '@/components/dropdown'
import { ChevronDownIcon } from '@heroicons/react/16/solid'

function Example() {
  function deleteUser() {
    if (confirm('Are you sure you want to delete this user?')) {
      // ...
    }
  }

  return (
    <Dropdown>
      <DropdownButton outline>
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu>
        <DropdownItem href="/users/1">View</DropdownItem>
        <DropdownItem href="/users/1/edit">Edit</DropdownItem>
        <DropdownItem onClick={() => deleteUser()}>Delete</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
Component API
Prop	Default	Description
Dropdown extends the Headless UI <Menu> component
children	-	The dropdown button and menu.
DropdownButton extends the <Button> component
color	dark/zinc	The color variant the button should use.
outline	false	Whether to use the outline button style.
plain	false	Whether to use the plain button style.
disabled	false	Whether or not to disable the button.
DropdownMenu extends the Headless UI <MenuItems> component
anchor	bottom	Where to position the dropdown menu.
children	-	The dropdown items and sections.
DropdownItem extends the Headless UI <MenuItem> component
href	-	The target URL when using the item as a link.
onClick	-	Handler to call when the item is selected.
children	-	The dropdown item text.
DropdownHeader extends the JSX <div> element
children	-	The dropdown header content.
DropdownSection extends the Headless UI <MenuSection> component
children	-	The dropdown items for the section.
DropdownHeading extends the Headless UI <MenuHeading> component
children	-	The section heading content.
DropdownDivider extends the Headless UI <MenuSeparator> component
This component does not expose any component-specific props.
DropdownLabel extends the Headless UI <Label> component
children	-	The label text.
DropdownDescription extends the Headless UI <Description> component
children	-	The description text.
DropdownShortcut extends the Headless UI <Description> component
keys	-	The keyboard shortcut.
Examples
Basic example
Use the Dropdown, DropdownButton, DropdownMenu, and DropdownItem components to build a basic dropdown menu:

Options
import { Dropdown, DropdownButton, DropdownItem, DropdownMenu } from '@/components/dropdown'
import { ChevronDownIcon } from '@heroicons/react/16/solid'

function Example() {
  function deleteUser() {
    if (confirm('Are you sure you want to delete this user?')) {
      // ...
    }
  }

  return (
    <Dropdown>
      <DropdownButton outline>
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu>
        <DropdownItem href="/users/1">View</DropdownItem>
        <DropdownItem href="/users/1/edit">Edit</DropdownItem>
        <DropdownItem onClick={() => deleteUser()}>Delete</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
Use the href prop for dropdown items that are links, and the onClick prop for dropdown items that should invoke a callback when selected.

Button style
The DropdownButton component is rendered as a Button by default and directly accepts all of the same styling props, such as color, outline, and plain:


Options

import { Dropdown, DropdownButton, DropdownItem, DropdownMenu } from '@/components/dropdown'
import { ChevronDownIcon } from '@heroicons/react/16/solid'

function Example() {
  return (
    <Dropdown>
      <DropdownButton color="cyan">
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu>
        <DropdownItem href="#">View</DropdownItem>
        <DropdownItem href="#">Edit</DropdownItem>
        <DropdownItem href="#">Export as CSV&hellip;</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
You can also use the as prop to render a completely different button component with your own custom styles.

Menu placement
Use the anchor prop on the DropdownMenu component to position the dropdown menu relative to the trigger:


Options

import { Dropdown, DropdownButton, DropdownItem, DropdownMenu } from '@/components/dropdown'
import { ChevronUpIcon } from '@heroicons/react/16/solid'

function Example() {
  return (
    <Dropdown>
      <DropdownButton outline>
        Options
        <ChevronUpIcon />
      </DropdownButton>
      <DropdownMenu anchor="top start">
        <DropdownItem href="#">View</DropdownItem>
        <DropdownItem href="#">Edit</DropdownItem>
        <DropdownItem href="#">Export as CSV&hellip;</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
Use the values top, right, bottom, left to center the menu along the appropriate edge, or combine it with start or end to align the menu to a specific corner, such as top start or bottom end.

With disabled items
Use the disabled prop on a DropdownItem to disable that item and prevent it from being selected:


Options

import { Dropdown, DropdownButton, DropdownItem, DropdownMenu } from '@/components/dropdown'
import { ChevronDownIcon } from '@heroicons/react/16/solid'

function Example({ url, renameFile, deleteFile }) {
  return (
    <Dropdown>
      <DropdownButton outline>
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu>
        <DropdownItem href={url}>Open</DropdownItem>
        <DropdownItem onClick={() => renameFile()} disabled>
          Rename
        </DropdownItem>
        <DropdownItem onClick={() => deleteFile()}>Delete</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
With sections
Use the DropdownSection, DropdownHeading, and DropdownDivider components to group dropdown items into sections:


Options

import {
  Dropdown,
  DropdownButton,
  DropdownDivider,
  DropdownHeading,
  DropdownItem,
  DropdownMenu,
  DropdownSection,
} from '@/components/dropdown'
import { ChevronDownIcon } from '@heroicons/react/16/solid'

function Example() {
  return (
    <Dropdown>
      <DropdownButton outline>
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu>
        <DropdownSection aria-label="Account">
          <DropdownItem href="/account">Account</DropdownItem>
          <DropdownItem href="/notifications">Notifications</DropdownItem>
          <DropdownItem href="/billing">Billing</DropdownItem>
        </DropdownSection>
        <DropdownDivider />
        <DropdownSection>
          <DropdownHeading>My events</DropdownHeading>
          <DropdownItem href="/upcoming-events">Upcoming events</DropdownItem>
          <DropdownItem href="/past-events">Past events</DropdownItem>
        </DropdownSection>
      </DropdownMenu>
    </Dropdown>
  )
}
Headings are optional but be sure to add an aria-label to sections without headings for assistive technology.

With descriptions
Use the DropdownDescription component along with a DropdownLabel to add a description to a dropdown item:


Options

import {
  Dropdown,
  DropdownButton,
  DropdownDescription,
  DropdownItem,
  DropdownLabel,
  DropdownMenu,
} from '@/components/dropdown'
import { ChevronDownIcon } from '@heroicons/react/16/solid'

function Example({ url, renameFile, deleteFile }) {
  return (
    <Dropdown>
      <DropdownButton outline>
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu>
        <DropdownItem href={url} target="_blank">
          <DropdownLabel>Open</DropdownLabel>
          <DropdownDescription>Open the file in a new tab.</DropdownDescription>
        </DropdownItem>
        <DropdownItem onClick={() => renameFile()}>
          <DropdownLabel>Rename</DropdownLabel>
          <DropdownDescription>Rename the file.</DropdownDescription>
        </DropdownItem>
        <DropdownItem onClick={() => deleteFile()}>
          <DropdownLabel>Delete</DropdownLabel>
          <DropdownDescription>Move the file to the trash.</DropdownDescription>
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
With icons
Add an icon as the first child of a DropdownItem to render it next to the dropdown text:


Options

import {
  Dropdown,
  DropdownButton,
  DropdownDivider,
  DropdownItem,
  DropdownLabel,
  DropdownMenu,
} from '@/components/dropdown'
import {
  ArrowRightStartOnRectangleIcon,
  ChevronDownIcon,
  Cog8ToothIcon,
  InformationCircleIcon,
  MoonIcon,
  UserIcon,
} from '@heroicons/react/16/solid'

function Example() {
  return (
    <Dropdown>
      <DropdownButton outline>
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu anchor="bottom">
        <DropdownItem href="#">
          <UserIcon />
          <DropdownLabel>Account</DropdownLabel>
        </DropdownItem>
        <DropdownItem href="#">
          <Cog8ToothIcon />
          <DropdownLabel>Settings</DropdownLabel>
        </DropdownItem>
        <DropdownItem href="#">
          <InformationCircleIcon />
          <DropdownLabel>Help center</DropdownLabel>
        </DropdownItem>
        <DropdownDivider />
        <DropdownItem href="#">
          <MoonIcon />
          <DropdownLabel>Dark mode</DropdownLabel>
        </DropdownItem>
        <DropdownDivider />
        <DropdownItem href="#">
          <ArrowRightStartOnRectangleIcon />
          <DropdownLabel>Sign out</DropdownLabel>
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
The DropdownItem component is designed to work best with 16×16 icons.

If you're using your own custom icons, make sure they include the data-slot="icon" prop so they receive the correct styles.

With keyboard shortcuts
Use the DropdownShortcut component along with a DropdownLabel to surface any keyboard shortcuts you've implemented in your application:


Options

import {
  Dropdown,
  DropdownButton,
  DropdownItem,
  DropdownLabel,
  DropdownMenu,
  DropdownShortcut,
} from '@/components/dropdown'
import { ChevronDownIcon } from '@heroicons/react/16/solid'

function Example({ url, renameFile, deleteFile }) {
  return (
    <Dropdown>
      <DropdownButton outline>
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu anchor="bottom start">
        <DropdownItem href={url}>
          <DropdownLabel>Open</DropdownLabel>
          <DropdownShortcut keys="⌘O" />
        </DropdownItem>
        <DropdownItem onClick={() => renameFile()}>
          <DropdownLabel>Rename</DropdownLabel>
          <DropdownShortcut keys="⌘R" />
        </DropdownItem>
        <DropdownItem onClick={() => deleteFile()}>
          <DropdownLabel>Delete</DropdownLabel>
          <DropdownShortcut keys="⇧⌘⌫" />
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
With header
Use the DropdownHeader component to add a custom header section to the top of a dropdown menu:


Options

import {
  Dropdown,
  DropdownButton,
  DropdownDivider,
  DropdownHeader,
  DropdownItem,
  DropdownMenu,
} from '@/components/dropdown'
import { ChevronDownIcon } from '@heroicons/react/16/solid'

function Example({ signOut }) {
  return (
    <Dropdown>
      <DropdownButton outline>
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu>
        <DropdownHeader>
          <div className="pr-6">
            <div className="text-xs text-zinc-500 dark:text-zinc-400">Signed in as Tom Cook</div>
            <div className="text-sm/7 font-semibold text-zinc-800 dark:text-white">tom@example.com</div>
          </div>
        </DropdownHeader>
        <DropdownDivider />
        <DropdownItem href="/my-profile">My profile</DropdownItem>
        <DropdownItem href="/notifications">Notifications</DropdownItem>
        <DropdownItem href="/security">Security</DropdownItem>
        <DropdownItem href="/billing">Billing</DropdownItem>
        <DropdownItem onClick={() => signOut()}>Sign out</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
It's important to note that assistive technology will not announce any content in a dropdown header, so keep this in mind when deciding what type of content to include.

With disabled button
Use the disabled prop on the DropdownButton component to disable a dropdown:


Options

import { Dropdown, DropdownButton, DropdownItem, DropdownMenu } from '@/components/dropdown'
import { ChevronDownIcon } from '@heroicons/react/16/solid'

function Example({ deleteUser }) {
  return (
    <Dropdown>
      <DropdownButton outline disabled>
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu>
        <DropdownItem href="/users/1">View</DropdownItem>
        <DropdownItem href="/users/1/edit">Edit</DropdownItem>
        <DropdownItem onClick={() => deleteUser()}>Delete</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
With icon trigger
Use a DropdownButton with the plain prop in combination with an icon to make an icon-only dropdown trigger:


import { Dropdown, DropdownButton, DropdownItem, DropdownMenu } from '@/components/dropdown'
import { EllipsisHorizontalIcon } from '@heroicons/react/16/solid'

function Example({ deleteUser }) {
  return (
    <Dropdown>
      <DropdownButton plain aria-label="More options">
        <EllipsisHorizontalIcon />
      </DropdownButton>
      <DropdownMenu>
        <DropdownItem href="/users/1">View</DropdownItem>
        <DropdownItem href="/users/1/edit">Edit</DropdownItem>
        <DropdownItem onClick={() => deleteUser()}>Delete</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
Be sure to include an aria-label so the button is announced properly to assistive technology.

With avatar trigger
Render the DropdownButton component as an AvatarButton component to use an avatar as the dropdown trigger:



import { AvatarButton } from '@/components/avatar'
import { Dropdown, DropdownButton, DropdownDivider, DropdownItem, DropdownMenu } from '@/components/dropdown'

function Example({ currentUser, signOut }) {
  return (
    <Dropdown>
      <DropdownButton className="size-8" as={AvatarButton} src={currentUser.avatarUrl} aria-label="Account options" />
      <DropdownMenu placement="bottom">
        <DropdownItem href="/profile">My profile</DropdownItem>
        <DropdownItem href="/settings">Settings</DropdownItem>
        <DropdownDivider />
        <DropdownItem onClick={() => signOut()}>Sign out</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
With custom trigger
Use the MenuButton component from @headlessui/react directly to render your own custom dropdown trigger:


Whitney
Admin
import { Dropdown, DropdownDivider, DropdownItem, DropdownMenu } from '@/components/dropdown'
import * as Headless from '@headlessui/react'
import { ChevronUpDownIcon } from '@heroicons/react/16/solid'

function Example({ currentUser, signOut }) {
  return (
    <Dropdown>
      <Headless.MenuButton
        className="flex w-48 items-center gap-3 rounded-xl border border-transparent p-1 data-active:border-zinc-200 data-hover:border-zinc-200 dark:data-active:border-zinc-700 dark:data-hover:border-zinc-700"
        aria-label="Account options"
      >
        <img className="size-10 rounded-lg" src={currentUser.avatarUrl} alt="" />
        <span className="block text-left">
          <span className="block text-sm/5 font-medium">{currentUser.name}</span>
          <span className="block text-xs/5 text-zinc-500">{currentUser.role}</span>
        </span>
        <ChevronUpDownIcon className="mr-1 ml-auto size-4 shrink-0 stroke-zinc-400" />
      </Headless.MenuButton>
      <DropdownMenu className="min-w-(--button-width)">
        <DropdownItem href="/profile">My profile</DropdownItem>
        <DropdownItem href="/settings">Settings</DropdownItem>
        <DropdownDivider />
        <DropdownItem onClick={() => signOut()}>Sign out</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
With custom menu width
Use min-w-* utilities to increase the minimum width of a DropdownMenu, and max-w-* utilities to prevent it from getting wider than a specific size:


Options

import { Dropdown, DropdownButton, DropdownItem, DropdownMenu } from '@/components/dropdown'
import { ChevronDownIcon } from '@heroicons/react/16/solid'

function Example() {
  return (
    <Dropdown>
      <DropdownButton outline>
        Options
        <ChevronDownIcon />
      </DropdownButton>
      <DropdownMenu className="min-w-48">
        <DropdownItem href="/account">Account</DropdownItem>
        <DropdownItem href="/notifications">Notifications</DropdownItem>
        <DropdownItem href="/billing">Billing</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  )
}
Dropdown menus are sized based on the width of their content by default, so this level of control can be helpful for menus that have very short or very long items.

On this page
Component API
Examples
Basic example
Button style
Menu placement
With disabled items
With sections
With descriptions
With icons
With keyboard shortcuts
With header
With disabled button
With icon trigger
With avatar trigger
With custom trigger
With custom menu width
Dropdown - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Fieldset
Something has to hold all these form controls together.


Shipping details
Without this your odds of getting your order are low.


Canada
We currently only ship to North America.

If you have a tiger, we'd like to know about it.

import { Description, Field, FieldGroup, Fieldset, Label, Legend } from '@/components/fieldset'
import { Input } from '@/components/input'
import { Select } from '@/components/select'
import { Text } from '@/components/text'
import { Textarea } from '@/components/textarea'

function Example() {
  return (
    <form action="/orders" method="POST">
      {/* ... */}
      <Fieldset>
        <Legend>Shipping details</Legend>
        <Text>Without this your odds of getting your order are low.</Text>
        <FieldGroup>
          <Field>
            <Label>Street address</Label>
            <Input name="street_address" />
          </Field>
          <Field>
            <Label>Country</Label>
            <Select name="country">
              <option>Canada</option>
              <option>Mexico</option>
              <option>United States</option>
            </Select>
            <Description>We currently only ship to North America.</Description>
          </Field>
          <Field>
            <Label>Delivery notes</Label>
            <Textarea name="notes" />
            <Description>If you have a tiger, we'd like to know about it.</Description>
          </Field>
        </FieldGroup>
      </Fieldset>
      {/* ... */}
    </form>
  )
}
Component API
Prop	Default	Description
Fieldset extends the JSX <div> element
disabled	false	Whether or not to disable the entire fieldset.
Legend extends the JSX <div> element
This component does not expose any component-specific props.
FieldGroup extends the JSX <div> element
This component does not expose any component-specific props.
Examples
Basic example
Use the Fieldset, Legend, Text, and FieldGroup components to group a subset of form controls together:


Shipping details
Without this your odds of getting your order are low.


Canada
We currently only ship to North America.

If you have a tiger, we'd like to know about it.

import { Description, Field, FieldGroup, Fieldset, Label, Legend } from '@/components/fieldset'
import { Input } from '@/components/input'
import { Select } from '@/components/select'
import { Text } from '@/components/text'
import { Textarea } from '@/components/textarea'

function Example() {
  return (
    <form action="/orders" method="POST">
      {/* ... */}
      <Fieldset>
        <Legend>Shipping details</Legend>
        <Text>Without this your odds of getting your order are low.</Text>
        <FieldGroup>
          <Field>
            <Label>Street address</Label>
            <Input name="street_address" />
          </Field>
          <Field>
            <Label>Country</Label>
            <Select name="country">
              <option>Canada</option>
              <option>Mexico</option>
              <option>United States</option>
            </Select>
            <Description>We currently only ship to North America.</Description>
          </Field>
          <Field>
            <Label>Delivery notes</Label>
            <Textarea name="notes" />
            <Description>If you have a tiger, we'd like to know about it.</Description>
          </Field>
        </FieldGroup>
      </Fieldset>
      {/* ... */}
    </form>
  )
}
Without legend
Use a Fieldset with aria-label to group a set of form controls together without a Legend:



Canada
We currently only ship to North America.

If you have a tiger, we'd like to know about it.

import { Description, Field, FieldGroup, Fieldset, Label } from '@/components/fieldset'
import { Input } from '@/components/input'
import { Select } from '@/components/select'
import { Textarea } from '@/components/textarea'

function Example() {
  return (
    <form action="/orders" method="POST">
      <Fieldset aria-label="Shipping details">
        <FieldGroup>
          <Field>
            <Label>Street address</Label>
            <Input name="street_address" />
          </Field>
          <Field>
            <Label>Country</Label>
            <Select name="country">
              <option>Canada</option>
              <option>Mexico</option>
              <option>United States</option>
            </Select>
            <Description>We currently only ship to North America.</Description>
          </Field>
          <Field>
            <Label>Delivery notes</Label>
            <Textarea name="notes" />
            <Description>If you have a tiger, we'd like to know about it.</Description>
          </Field>
        </FieldGroup>
      </Fieldset>
    </form>
  )
}
Without role
Use the FieldGroup component on its own to use it solely for layout, without adding role="group" and announcing it to assistive technology like a traditional fieldset:


Canada
We currently only ship to North America.

If you have a tiger, we'd like to know about it.

import { Description, Field, FieldGroup, Label } from '@/components/fieldset'
import { Input } from '@/components/input'
import { Select } from '@/components/select'
import { Textarea } from '@/components/textarea'

function Example() {
  return (
    <form action="/orders" method="POST">
      <FieldGroup>
        <Field>
          <Label>Street address</Label>
          <Input name="street_address" />
        </Field>
        <Field>
          <Label>Country</Label>
          <Select name="country">
            <option>Canada</option>
            <option>Mexico</option>
            <option>United States</option>
          </Select>
          <Description>We currently only ship to North America.</Description>
        </Field>
        <Field>
          <Label>Delivery notes</Label>
          <Textarea name="notes" />
          <Description>If you have a tiger, we'd like to know about it.</Description>
        </Field>
      </FieldGroup>
    </form>
  )
}
With grid layout
For more complex layouts like grids, use wrapper elements to create nested form control groups and style them yourself with utility classes:


Shipping details
Without this your odds of getting your order are low.


Canada
If you have a tiger, we'd like to know about it.

import { Description, Field, FieldGroup, Fieldset, Label, Legend } from '@/components/fieldset'
import { Input } from '@/components/input'
import { Select } from '@/components/select'
import { Text } from '@/components/text'
import { Textarea } from '@/components/textarea'

function Example() {
  return (
    <form action="/orders" method="POST">
      {/* ... */}
      <Fieldset>
        <Legend>Shipping details</Legend>
        <Text>Without this your odds of getting your order are low.</Text>
        <FieldGroup>
          <div className="grid grid-cols-1 gap-8 sm:grid-cols-2 sm:gap-4">
            <Field>
              <Label>First name</Label>
              <Input name="first_name" />
            </Field>
            <Field>
              <Label>Last name</Label>
              <Input name="last_name" />
            </Field>
          </div>
          <Field>
            <Label>Street address</Label>
            <Input name="street_address" />
          </Field>
          <div className="grid grid-cols-1 gap-8 sm:grid-cols-3 sm:gap-4">
            <Field className="sm:col-span-2">
              <Label>Country</Label>
              <Select name="country">
                <option>Canada</option>
                <option>Mexico</option>
                <option>United States</option>
              </Select>
            </Field>
            <Field>
              <Label>Postal code</Label>
              <Input name="postal_code" />
            </Field>
          </div>
          <Field>
            <Label>Delivery notes</Label>
            <Textarea name="notes" />
            <Description>If you have a tiger, we'd like to know about it.</Description>
          </Field>
        </FieldGroup>
      </Fieldset>
      {/* ... */}
    </form>
  )
}
With custom layout
Use a plain <div> instead of a FieldGroup along with the unstyled Field component from @headlessui/react to implement a fully custom layout:


Shipping details
Without this your odds of getting your order are low.


Canada
import { Fieldset, Label, Legend } from '@/components/fieldset'
import { Input } from '@/components/input'
import { Select } from '@/components/select'
import { Text } from '@/components/text'
import { Textarea } from '@/components/textarea'
import * as Headless from '@headlessui/react'

function Example() {
  return (
    <form action="/orders" method="POST">
      {/* ... */}
      <Fieldset>
        <Legend>Shipping details</Legend>
        <Text>Without this your odds of getting your order are low.</Text>
        <div data-slot="control" className="grid grid-cols-1 items-center gap-x-4 gap-y-6 sm:grid-cols-3">
          <Headless.Field className="grid grid-cols-subgrid sm:col-span-3">
            <Label>Full name</Label>
            <Input className="mt-3 sm:col-span-2 sm:mt-0" name="full_name" />
          </Headless.Field>
          <Headless.Field className="grid grid-cols-subgrid sm:col-span-3">
            <Label>Street address</Label>
            <Input className="mt-3 sm:col-span-2 sm:mt-0" name="street_address" />
          </Headless.Field>
          <Headless.Field className="grid grid-cols-subgrid sm:col-span-3">
            <Label>Country</Label>
            <Select className="mt-3 sm:col-span-2 sm:mt-0" name="country">
              <option>Canada</option>
              <option>Mexico</option>
              <option>United States</option>
            </Select>
          </Headless.Field>
          <Headless.Field className="grid grid-cols-subgrid sm:col-span-3">
            <Label>Delivery notes</Label>
            <Textarea className="mt-3 sm:col-span-2 sm:mt-0" name="notes" />
          </Headless.Field>
        </div>
      </Fieldset>
      {/* ... */}
    </form>
  )
}
Add data-slot="control" to a child of your Fieldset if you want it to receive the same layout styles as a FieldGroup.

Disabled state
Add the disabled prop to a Fieldset component to disable the entire fieldset:


Shipping details
Without this your odds of getting your order are low.


Canada
We currently only ship to North America.

If you have a tiger, we'd like to know about it.

import { Description, Field, FieldGroup, Fieldset, Label, Legend } from '@/components/fieldset'
import { Input } from '@/components/input'
import { Select } from '@/components/select'
import { Text } from '@/components/text'
import { Textarea } from '@/components/textarea'

function Example() {
  return (
    <form action="/orders" method="POST">
      {/* ... */}
      <Fieldset disabled>
        <Legend>Shipping details</Legend>
        <Text>Without this your odds of getting your order are low.</Text>
        <FieldGroup>
          <Field>
            <Label>Street address</Label>
            <Input name="street_address" />
          </Field>
          <Field>
            <Label>Country</Label>
            <Select name="country">
              <option>Canada</option>
              <option>Mexico</option>
              <option>United States</option>
            </Select>
            <Description>We currently only ship to North America.</Description>
          </Field>
          <Field>
            <Label>Delivery notes</Label>
            <Textarea name="notes" />
            <Description>If you have a tiger, we'd like to know about it.</Description>
          </Field>
        </FieldGroup>
      </Fieldset>
      {/* ... */}
    </form>
  )
}
On this page
Component API
Examples
Basic example
Without legend
Without role
With grid layout
With custom layout
Disabled state
Fieldset - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Heading
You get two — we're building applications here, not authoring medical journals.

Order #1011
Refund
Resend invoice
import { Heading } from '@/components/heading'

function Example() {
  return (
    <div className="flex w-full flex-wrap items-end justify-between gap-4 border-b border-zinc-950/10 pb-6 dark:border-white/10">
      <Heading>Order #1011</Heading>
      <div className="flex gap-4">
        <Button outline>Refund</Button>
        <Button>Resend invoice</Button>
      </div>
    </div>
  )
}
Component API
Prop	Default	Description
Heading extends the JSX <h1> element
This component does not expose any component-specific props.
Subheading extends the JSX <h2> element
This component does not expose any component-specific props.
Examples
Basic heading example
Use the Heading component to add a primary heading to a page:

Recent orders
import { Heading } from '@/components/heading'

function Example() {
  return <Heading>Recent orders</Heading>
}
The Heading component renders an h1 by default, which you can customize with the level prop.

Basic subheading example
Use the Subheading component to add a subheading to a page:

Recent orders
import { Subheading } from '@/components/heading'

function Example() {
  return <Subheading>Recent orders</Subheading>
}
The Subheading component renders an h2 by default, which you can customize with the level prop.

With custom level
Use the level prop to render a different heading element for semantic purposes while still maintaining the same visual styles:

Recent orders
import { Heading } from '@/components/heading'

function Example() {
  return <Heading level={2}>Recent orders</Heading>
}
On this page
Component API
Examples
Basic heading example
Basic subheading example
With custom level
Heading - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Input
If web applications didn't need inputs, computers wouldn't have keyboards.

import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'

function Example() {
  return (
    <Field>
      <Label>Full name</Label>
      <Input name="full_name" />
    </Field>
  )
}
Component API
Prop	Default	Description
Input extends the Headless UI <Input> component
disabled	false	Whether or not to disable the input.
invalid	false	Whether or not the input has a validation error.
name	-	The name to use when submitting an HTML form.
defaultValue	-	The initial value for the input.
value	-	The controlled value of the input.
onChange	-	Handler to call when the input value changes.
Field extends the Headless UI <Field> component
disabled	false	Whether or not to disable the entire field.
Label extends the Headless UI <Label> component
This component does not expose any component-specific props.
Description extends the Headless UI <Description> component
This component does not expose any component-specific props.
ErrorMessage extends the Headless UI <Description> component
This component does not expose any component-specific props.
Examples
Basic example
Use the Input component on its own to render a standalone input without an associated Label component:

import { Input } from '@/components/input'

function Example() {
  return <Input aria-label="Full name" name="full_name" />
}
Make sure to provide an aria-label for assistive technology, or connect the Input to your own <label> element using an id.

With label
Wrap a Label and Input with the Field component to automatically associate them using a generated ID:

import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'

function Example() {
  return (
    <Field>
      <Label>Full name</Label>
      <Input name="full_name" />
    </Field>
  )
}
With description
Use the Description component to add a description above or below your Input:

Use the name you'd like people to see in their cart.

import { Description, Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'

function Example() {
  return (
    <Field>
      <Label>Product name</Label>
      <Description>Use the name you'd like people to see in their cart.</Description>
      <Input name="product_name" />
    </Field>
  )
}
With icon
Wrap an icon and Input with the InputGroup component to render an input with an icon:

Search…
import { Input, InputGroup } from '@/components/input'
import { MagnifyingGlassIcon } from '@heroicons/react/16/solid'

function Example() {
  return (
    <InputGroup>
      <MagnifyingGlassIcon />
      <Input name="search" placeholder="Search&hellip;" aria-label="Search" />
    </InputGroup>
  )
}
The InputGroup component is designed to work best with 16×16 icons.

If you're using your own custom icons, make sure they include the data-slot="icon" prop so they receive the correct styles.

Setting the type
Use the type prop to set the input type to any supported text input type:

import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'

function Example() {
  return (
    <Field>
      <Label>Your website</Label>
      <Input type="url" name="url" />
    </Field>
  )
}
The supported types are email, number, password, search, tel, text, url, date, datetime-local, month, time, and week.

Disabled state
Add the disabled prop to the Field component to disable an Input and the associated Label:

import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'

function Example() {
  return (
    <Field disabled>
      <Label>Full name</Label>
      <Input name="full_name" />
    </Field>
  )
}
You can also disable an input outside of a Field by adding the disabled prop directly to the Input itself.

Validation errors
Add the invalid prop to the Input component to indicate a validation error, and render the error using the ErrorMessage component:

This field is required.

import { ErrorMessage, Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'

function Example({ errors }) {
  return (
    <Field>
      <Label>Full name</Label>
      <Input name="full_name" invalid={errors.has('full_name')} />
      {errors.has('full_name') && <ErrorMessage>{errors.get('full_name')}</ErrorMessage>}
    </Field>
  )
}
Constraining width
Use the className prop on the Input component to make layout adjustments like adjusting the max-width:

import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'

function Example() {
  return (
    <Field>
      <Label>CVC</Label>
      <Input className="max-w-[6rem]" name="cvc" pattern="[0-9]*" />
    </Field>
  )
}
Be aware that the className prop is a sharp knife — make sure to only add classes that don't conflict with classes the component already includes or you'll get unexpected results.

With custom layout
Use the unstyled Field component from @headlessui/react directly instead of the styled Field component to implement a custom layout:

import { Label } from '@/components/fieldset'
import { Input } from '@/components/input'
import * as Headless from '@headlessui/react'

function Example() {
  return (
    <Headless.Field className="flex items-center justify-center gap-6">
      <Label>Full name</Label>
      <Input name="full_name" className="max-w-48" />
    </Headless.Field>
  )
}
Using the unstyled Field component will ensure important accessibility features are still handled for you like generating IDs and associating elements using aria-* attributes.

Controlled component
Use the normal value and onChange props to use the Input component as a controlled component:

import { Field, Label } from '@/components/fieldset'
import { Input } from '@/components/input'
import { useState } from 'react'

function Example() {
  let [name, setName] = useState('')

  return (
    <Field>
      <Label>Full name</Label>
      <Input name="full_name" value={name} onChange={(e) => setName(e.target.value)} />
    </Field>
  )
}
On this page
Component API
Examples
Basic example
With label
With description
With icon
Setting the type
Disabled state
Validation errors
Constraining width
With custom layout
Controlled component
Input - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Listbox
A painstakingly re-engineered select menu, just so you can put a flag in it or have a placeholder.


Active
import { Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'

function Example() {
  return (
    <Field>
      <Label>Project status</Label>
      <Listbox name="status" defaultValue="active">
        <ListboxOption value="active">
          <ListboxLabel>Active</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="paused">
          <ListboxLabel>Paused</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="delayed">
          <ListboxLabel>Delayed</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="canceled">
          <ListboxLabel>Canceled</ListboxLabel>
        </ListboxOption>
      </Listbox>
    </Field>
  )
}
Component API
Prop	Default	Description
Listbox extends the Headless UI <Listbox> component
disabled	false	Whether or not to disable the listbox.
invalid	false	Whether or not the listbox has a validation error.
name	-	The name to use when submitting an HTML form.
defaultValue	-	The initial value for the listbox.
value	-	The controlled value of the listbox.
onChange	-	Handler to call when the listbox value changes.
placeholder	-	The text to show when no option is selected.
ListboxOption extends the Headless UI <ListboxOption> component
value	-	The option value.
ListboxLabel extends the JSX <span> element
This component does not expose any component-specific props.
ListboxDescription extends the JSX <span> element
This component does not expose any component-specific props.
Field extends the Headless UI <Field> component
disabled	false	Whether or not to disable the entire field.
Label extends the Headless UI <Label> component
This component does not expose any component-specific props.
Description extends the Headless UI <Description> component
This component does not expose any component-specific props.
ErrorMessage extends the Headless UI <Description> component
This component does not expose any component-specific props.
Examples
Basic example
Use the Listbox, ListboxOption, and ListboxLabel components to build a basic listbox:


Active
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'

function Example() {
  return (
    <Listbox name="status" defaultValue="active" aria-label="Project status">
      <ListboxOption value="active">
        <ListboxLabel>Active</ListboxLabel>
      </ListboxOption>
      <ListboxOption value="paused">
        <ListboxLabel>Paused</ListboxLabel>
      </ListboxOption>
      <ListboxOption value="delayed">
        <ListboxLabel>Delayed</ListboxLabel>
      </ListboxOption>
      <ListboxOption value="canceled">
        <ListboxLabel>Canceled</ListboxLabel>
      </ListboxOption>
    </Listbox>
  )
}
Make sure to provide an aria-label for assistive technology, or connect the Listbox to your own <label> element using an id.

With label
Wrap a Label and Listbox with the Field component to automatically associate them using a generated ID:


Active
import { Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'

function Example() {
  return (
    <Field>
      <Label>Project status</Label>
      <Listbox name="status" defaultValue="active">
        <ListboxOption value="active">
          <ListboxLabel>Active</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="paused">
          <ListboxLabel>Paused</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="delayed">
          <ListboxLabel>Delayed</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="canceled">
          <ListboxLabel>Canceled</ListboxLabel>
        </ListboxOption>
      </Listbox>
    </Field>
  )
}
With description
Use the Description component to add a description above or below your Listbox:

This will be visible to clients on the project.


Active
import { Description, Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'

function Example() {
  return (
    <Field>
      <Label>Project status</Label>
      <Description>This will be visible to clients on the project.</Description>
      <Listbox name="status" defaultValue="active">
        <ListboxOption value="active">
          <ListboxLabel>Active</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="paused">
          <ListboxLabel>Paused</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="delayed">
          <ListboxLabel>Delayed</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="canceled">
          <ListboxLabel>Canceled</ListboxLabel>
        </ListboxOption>
      </Listbox>
    </Field>
  )
}
With placeholder
Use the placeholder prop to add a placeholder to your Listbox when no value is selected:


Select status…
import { Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'

function Example() {
  return (
    <Field>
      <Label>Project status</Label>
      <Listbox name="status" placeholder="Select status&hellip;">
        <ListboxOption value="active">
          <ListboxLabel>Active</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="paused">
          <ListboxLabel>Paused</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="delayed">
          <ListboxLabel>Delayed</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="canceled">
          <ListboxLabel>Canceled</ListboxLabel>
        </ListboxOption>
      </Listbox>
    </Field>
  )
}
With avatars
Add an Avatar to a ListboxOption by inserting it before your ListboxLabel:



Leslie Alexander
import { Avatar } from '@/components/avatar'
import { Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'

function Example({ users }) {
  return (
    <Field>
      <Label>Assigned to</Label>
      <Listbox name="user">
        {users.map((user) => (
          <ListboxOption key={user.id} value={user}>
            <Avatar src={user.avatarUrl} initials={user.initial} className="bg-purple-500 text-white" alt="" />
            <ListboxLabel>{user.name}</ListboxLabel>
          </ListboxOption>
        ))}
      </Listbox>
    </Field>
  )
}
With icons
Add an icon to a ListboxOption by inserting it before your ListboxLabel:


Left
import { Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'
import { Bars3BottomLeftIcon, Bars3BottomRightIcon, Bars3Icon } from '@heroicons/react/16/solid'

function Example() {
  return (
    <Field>
      <Label>Alignment</Label>
      <Listbox name="alignment" defaultValue="left">
        <ListboxOption value="left">
          <Bars3BottomLeftIcon />
          <ListboxLabel>Left</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="right">
          <Bars3BottomRightIcon />
          <ListboxLabel>Right</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="justified">
          <Bars3Icon />
          <ListboxLabel>Justified</ListboxLabel>
        </ListboxOption>
      </Listbox>
    </Field>
  )
}
The ListboxOption component is designed to work best with 16×16 icons.

If you're using your own custom icons, make sure they include the data-slot="icon" prop so they receive the correct styles.

With flags
Add a flag icon to a ListboxOption by inserting it before your ListboxLabel, just like any other icon:


Mexico
import { Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'
import { Flag } from '@/flags'

function Example({ currentCountry, countries }) {
  return (
    <Field>
      <Label>Assigned to</Label>
      <Listbox name="user" defaultValue={currentCountry}>
        {countries.map((country) => (
          <ListboxOption value={country.code} key={country.code}>
            <Flag className="w-5 sm:w-4" code={country.code} />
            <ListboxLabel>{country.name}</ListboxLabel>
          </ListboxOption>
        ))}
      </Listbox>
    </Field>
  )
}
We like the 16×12 flag icons from Flagpack, a great set of open-source flag icons.

With secondary text
Use the ListboxDescription component to add secondary text to a listbox option:


Dries Vincent
@driesvincent
import { Field, Label } from '@/components/fieldset'
import { Listbox, ListboxDescription, ListboxLabel, ListboxOption } from '@/components/listbox'

function Example({ users }) {
  return (
    <Field>
      <Label>User</Label>
      <Listbox name="user">
        {users.map((user) => (
          <ListboxOption key={user.id} value={user}>
            <ListboxLabel>{user.name}</ListboxLabel>
            <ListboxDescription>@{user.handle}</ListboxDescription>
          </ListboxOption>
        ))}
      </Listbox>
    </Field>
  )
}
Disabled state
Add the disabled prop to the Field component to disable a Listbox and the associated Label:


Delayed
import { Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'

function Example() {
  return (
    <Field disabled>
      <Label>Project status</Label>
      <Listbox name="status" defaultValue="delayed">
        <ListboxOption value="active">
          <ListboxLabel>Active</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="paused">
          <ListboxLabel>Paused</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="delayed">
          <ListboxLabel>Delayed</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="canceled">
          <ListboxLabel>Canceled</ListboxLabel>
        </ListboxOption>
      </Listbox>
    </Field>
  )
}
You can also disable a listbox outside of a Field by adding the disabled prop directly to the Listbox itself.

Validation errors
Add the invalid prop to the Listbox component to indicate a validation error, and render the error using the ErrorMessage component:


Select a status…
A project status is required.

import { ErrorMessage, Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'

function Example({ errors }) {
  return (
    <Field invalid>
      <Label>Project status</Label>
      <Listbox name="status" placeholder="Select a status&hellip;" invalid={errors.has('status')}>
        <ListboxOption value="active">
          <ListboxLabel>Active</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="paused">
          <ListboxLabel>Paused</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="delayed">
          <ListboxLabel>Delayed</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="canceled">
          <ListboxLabel>Canceled</ListboxLabel>
        </ListboxOption>
      </Listbox>
      {errors.has('status') && <ErrorMessage>{errors.get('status')}</ErrorMessage>}
    </Field>
  )
}
Constraining width
Use the className prop on the Listbox component to make layout adjustments like adjusting the max-width:


Monday
import { Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'

function Example() {
  return (
    <Field>
      <Label>Day of the week</Label>
      <Listbox className="max-w-40" name="day_of_the_week" defaultValue="Monday">
        <ListboxOption value="Monday">
          <ListboxLabel>Monday</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="Tuesday">
          <ListboxLabel>Tuesday</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="Wednesday">
          <ListboxLabel>Wednesday</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="Thursday">
          <ListboxLabel>Thursday</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="Friday">
          <ListboxLabel>Friday</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="Saturday">
          <ListboxLabel>Saturday</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="Sunday">
          <ListboxLabel>Sunday</ListboxLabel>
        </ListboxOption>
      </Listbox>
    </Field>
  )
}
Be aware that the className prop is a sharp knife — make sure to only add classes that don't conflict with classes the component already includes or you'll get unexpected results.

With custom layout
Use the unstyled Field component from @headlessui/react directly instead of the styled Field component to implement a custom layout:


Active
import { Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'
import * as Headless from '@headlessui/react'

function Example() {
  return (
    <Headless.Field className="flex items-baseline justify-center gap-6">
      <Label>Project status</Label>
      <Listbox name="status" defaultValue="active" className="max-w-48">
        <ListboxOption value="active">
          <ListboxLabel>Active</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="paused">
          <ListboxLabel>Paused</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="delayed">
          <ListboxLabel>Delayed</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="canceled">
          <ListboxLabel>Canceled</ListboxLabel>
        </ListboxOption>
      </Listbox>
    </Headless.Field>
  )
}
Using the unstyled Field component will ensure important accessibility features are still handled for you like generating IDs and associating elements using aria-* attributes.

Controlled component
Use the normal value and onChange props to use the Listbox component as a controlled component:


Active
import { Field, Label } from '@/components/fieldset'
import { Listbox, ListboxLabel, ListboxOption } from '@/components/listbox'
import { useState } from 'react'

function Example() {
  let [status, setStatus] = useState('active')

  return (
    <Field>
      <Label>Project status</Label>
      <Listbox name="status" value={status} onChange={setStatus}>
        <ListboxOption value="active">
          <ListboxLabel>Active</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="paused">
          <ListboxLabel>Paused</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="delayed">
          <ListboxLabel>Delayed</ListboxLabel>
        </ListboxOption>
        <ListboxOption value="canceled">
          <ListboxLabel>Canceled</ListboxLabel>
        </ListboxOption>
      </Listbox>
    </Field>
  )
}
On this page
Component API
Examples
Basic example
With label
With description
With placeholder
With avatars
With icons
With flags
With secondary text
Disabled state
Validation errors
Constraining width
With custom layout
Controlled component
Listbox - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Navbar
No one ever got fired for starting a website with a horizontal navigation menu.



Tailwind Labs
Home
Events
Orders


import { Avatar } from '@/components/avatar'
import {
  Dropdown,
  DropdownButton,
  DropdownDivider,
  DropdownItem,
  DropdownLabel,
  DropdownMenu,
} from '@/components/dropdown'
import { Navbar, NavbarDivider, NavbarItem, NavbarLabel, NavbarSection, NavbarSpacer } from '@/components/navbar'
import {
  ArrowRightStartOnRectangleIcon,
  ChevronDownIcon,
  Cog8ToothIcon,
  LightBulbIcon,
  PlusIcon,
  ShieldCheckIcon,
  UserIcon,
} from '@heroicons/react/16/solid'
import { InboxIcon, MagnifyingGlassIcon } from '@heroicons/react/20/solid'

function Example() {
  return (
    <Navbar>
      <Dropdown>
        <DropdownButton as={NavbarItem}>
          <Avatar src="/tailwind-logo.svg" />
          <NavbarLabel>Tailwind Labs</NavbarLabel>
          <ChevronDownIcon />
        </DropdownButton>
        <DropdownMenu className="min-w-64" anchor="bottom start">
          <DropdownItem href="/teams/1/settings">
            <Cog8ToothIcon />
            <DropdownLabel>Settings</DropdownLabel>
          </DropdownItem>
          <DropdownDivider />
          <DropdownItem href="/teams/1">
            <Avatar slot="icon" src="/tailwind-logo.svg" />
            <DropdownLabel>Tailwind Labs</DropdownLabel>
          </DropdownItem>
          <DropdownItem href="/teams/2">
            <Avatar slot="icon" initials="WC" className="bg-purple-500 text-white" />
            <DropdownLabel>Workcation</DropdownLabel>
          </DropdownItem>
          <DropdownDivider />
          <DropdownItem href="/teams/create">
            <PlusIcon />
            <DropdownLabel>New team&hellip;</DropdownLabel>
          </DropdownItem>
        </DropdownMenu>
      </Dropdown>
      <NavbarDivider className="max-lg:hidden" />
      <NavbarSection className="max-lg:hidden">
        <NavbarItem href="/" current>
          Home
        </NavbarItem>
        <NavbarItem href="/events">Events</NavbarItem>
        <NavbarItem href="/orders">Orders</NavbarItem>
      </NavbarSection>
      <NavbarSpacer />
      <NavbarSection>
        <NavbarItem href="/search" aria-label="Search">
          <MagnifyingGlassIcon />
        </NavbarItem>
        <NavbarItem href="/inbox" aria-label="Inbox">
          <InboxIcon />
        </NavbarItem>
        <Dropdown>
          <DropdownButton as={NavbarItem}>
            <Avatar src="/profile-photo.jpg" square />
          </DropdownButton>
          <DropdownMenu className="min-w-64" anchor="bottom end">
            <DropdownItem href="/my-profile">
              <UserIcon />
              <DropdownLabel>My profile</DropdownLabel>
            </DropdownItem>
            <DropdownItem href="/settings">
              <Cog8ToothIcon />
              <DropdownLabel>Settings</DropdownLabel>
            </DropdownItem>
            <DropdownDivider />
            <DropdownItem href="/privacy-policy">
              <ShieldCheckIcon />
              <DropdownLabel>Privacy policy</DropdownLabel>
            </DropdownItem>
            <DropdownItem href="/share-feedback">
              <LightBulbIcon />
              <DropdownLabel>Share feedback</DropdownLabel>
            </DropdownItem>
            <DropdownDivider />
            <DropdownItem href="/logout">
              <ArrowRightStartOnRectangleIcon />
              <DropdownLabel>Sign out</DropdownLabel>
            </DropdownItem>
          </DropdownMenu>
        </Dropdown>
      </NavbarSection>
    </Navbar>
  )
}
Component API
Prop	Default	Description
Navbar extends the JSX <div> element
This component does not expose any component-specific props.
NavbarDivider extends the JSX <div> element
This component does not expose any component-specific props.
NavbarSection extends the JSX <div> element
This component does not expose any component-specific props.
NavbarSpacer extends the JSX <div> element
This component does not expose any component-specific props.
NavbarItem extends the Headless UI Button component or the Link component
current	-	Whether or not it is the current navigation item.
href	-	The target URL when using the button as a link.
NavbarLabel extends the JSX <span> element
This component does not expose any component-specific props.
Examples
Basic example
Use the Navbar, NavbarSection and NavbarItem components to build a basic navbar with navigation links:

Home
Events
Orders
import { Navbar, NavbarItem, NavbarSection } from '@/components/navbar'

function Example() {
  return (
    <Navbar>
      <NavbarSection>
        <NavbarItem href="/">Home</NavbarItem>
        <NavbarItem href="/events">Events</NavbarItem>
        <NavbarItem href="/orders">Orders</NavbarItem>
      </NavbarSection>
    </Navbar>
  )
}
The NavbarItem component can be used either as a Link by providing an href prop or as a Button by omitting the href prop.

With logo
Add your own logo as an image or component at the beginning of your navbar:

Home

Events
Orders
import { Link } from '@/components/link'
import { Navbar, NavbarItem, NavbarSection } from '@/components/navbar'
import { Logo } from './logo'

function Example() {
  return (
    <Navbar>
      <Link href="/" aria-label="Home">
        <Logo className="size-10 sm:size-8" />
      </Link>
      <NavbarSection>
        <NavbarItem href="/" current>
          Home
        </NavbarItem>
        <NavbarItem href="/events">Events</NavbarItem>
        <NavbarItem href="/orders">Orders</NavbarItem>
      </NavbarSection>
    </Navbar>
  )
}
To best fit the navbar design, we recommend making your logo 40px tall at mobile sizes, and 32px tall at the sm breakpoint above.

With active state
Use the current prop to specify which NavbarItem is the current navigation item:

Home

Events
Orders
import { Navbar, NavbarItem, NavbarSection } from '@/components/navbar'
import { Logo } from './logo'

function Example() {
  return (
    <Navbar>
      <Link href="/" aria-label="Home">
        <Logo className="size-10 sm:size-8" />
      </Link>
      <NavbarSection>
        <NavbarItem href="/" current>
          Home
        </NavbarItem>
        <NavbarItem href="/events">Events</NavbarItem>
        <NavbarItem href="/orders">Orders</NavbarItem>
      </NavbarSection>
    </Navbar>
  )
}
With icon links
Use an icon as the only child of a NavbarItem to create icon-only links:

import { Navbar, NavbarItem, NavbarSection, NavbarSpacer } from '@/components/navbar'
import { InboxIcon, MagnifyingGlassIcon } from '@heroicons/react/20/solid'
import { Logo } from './logo'

function Example() {
  return (
    <Navbar>
      <Link href="/" aria-label="Home">
        <Logo className="size-10 sm:size-8" />
      </Link>
      <NavbarSpacer />
      <NavbarSection>
        <NavbarItem href="/search" aria-label="Search">
          <MagnifyingGlassIcon />
        </NavbarItem>
        <NavbarItem href="/inbox" aria-label="Inbox">
          <InboxIcon />
        </NavbarItem>
      </NavbarSection>
    </Navbar>
  )
}
When using icon-only links, make sure to provide an aria-label for assistive technology.

The NavbarItem component is designed to work best with 20×20 icons.

If you're using your own custom icons, make sure they include the data-slot="icon" prop so they receive the correct styles.

With space between items
Use the NavbarSpacer component to add space between items in the navbar:

import { Navbar, NavbarItem, NavbarSection, NavbarSpacer } from '@/components/navbar'
import { InboxIcon, MagnifyingGlassIcon } from '@heroicons/react/20/solid'
import { Logo } from './logo'

function Example() {
  return (
    <Navbar>
      <Link href="/" aria-label="Home">
        <Logo className="size-10 sm:size-8" />
      </Link>
      <NavbarSpacer />
      <NavbarSection>
        <NavbarItem href="/search" aria-label="Search">
          <MagnifyingGlassIcon />
        </NavbarItem>
        <NavbarItem href="/inbox" aria-label="Inbox">
          <InboxIcon />
        </NavbarItem>
      </NavbarSection>
    </Navbar>
  )
}
With divider
Use the NavbarDivider component to add a dividing line between items in the navbar:

Home
Events
Orders
import { Navbar, NavbarDivider, NavbarItem, NavbarSection } from '@/components/navbar'
import { Logo } from './logo'

function Example() {
  return (
    <Navbar>
      <Link href="/" aria-label="Home">
        <Logo className="size-10 sm:size-8" />
      </Link>
      <NavbarDivider />
      <NavbarSection>
        <NavbarItem href="/">Home</NavbarItem>
        <NavbarItem href="/events">Events</NavbarItem>
        <NavbarItem href="/orders">Orders</NavbarItem>
      </NavbarSection>
    </Navbar>
  )
}
With dropdown
Use the Dropdown component add a dropdown menu to a navbar by rendering the DropdownButton as a NavbarItem:



Tailwind Labs
import { Avatar } from '@/components/avatar'
import {
  Dropdown,
  DropdownButton,
  DropdownDivider,
  DropdownItem,
  DropdownLabel,
  DropdownMenu,
} from '@/components/dropdown'
import { Navbar, NavbarItem, NavbarLabel, NavbarSection, NavbarSpacer } from '@/components/navbar'
import { ChevronDownIcon, Cog8ToothIcon, PlusIcon } from '@heroicons/react/16/solid'
import { InboxIcon, MagnifyingGlassIcon } from '@heroicons/react/20/solid'

function Example() {
  return (
    <Navbar>
      <Dropdown>
        <DropdownButton as={NavbarItem} aria-label="Account menu">
          <Avatar src="/tailwind-logo.svg" />
          <NavbarLabel>Tailwind Labs</NavbarLabel>
          <ChevronDownIcon />
        </DropdownButton>
        <DropdownMenu className="min-w-64" anchor="bottom start">
          <DropdownItem href="/teams/1/settings">
            <Cog8ToothIcon />
            <DropdownLabel>Settings</DropdownLabel>
          </DropdownItem>
          <DropdownDivider />
          <DropdownItem href="/teams/1">
            <Avatar slot="icon" src="/tailwind-logo.svg" />
            <DropdownLabel>Tailwind Labs</DropdownLabel>
          </DropdownItem>
          <DropdownItem href="/teams/2">
            <Avatar slot="icon" initials="WC" className="bg-purple-500 text-white" />
            <DropdownLabel>Workcation</DropdownLabel>
          </DropdownItem>
          <DropdownDivider />
          <DropdownItem href="/teams/create">
            <PlusIcon />
            <DropdownLabel>New team&hellip;</DropdownLabel>
          </DropdownItem>
        </DropdownMenu>
      </Dropdown>
      <NavbarSpacer />
      <NavbarSection>
        <NavbarItem href="/search" aria-label="Search">
          <MagnifyingGlassIcon />
        </NavbarItem>
        <NavbarItem href="/inbox" aria-label="Inbox">
          <InboxIcon />
        </NavbarItem>
      </NavbarSection>
    </Navbar>
  )
}
See the Dropdown docs for more information on building dropdown menus.

With avatar dropdown
Use the Dropdown component with an Avatar to add an avatar-only dropdown to a navbar:



import { Avatar } from '@/components/avatar'
import { Dropdown, DropdownDivider, DropdownItem, DropdownLabel, DropdownMenu } from '@/components/dropdown'
import { Navbar, NavbarItem, NavbarSpacer } from '@/components/navbar'
import {
  ArrowRightStartOnRectangleIcon,
  Cog8ToothIcon,
  LightBulbIcon,
  ShieldCheckIcon,
  UserIcon,
} from '@heroicons/react/16/solid'
import { Logo } from './logo'

function Example() {
  return (
    <Navbar>
      <Link href="/" aria-label="Home">
        <Logo className="size-10 sm:size-8" />
      </Link>
      <NavbarSpacer />
      <Dropdown>
        <DropdownButton as={NavbarItem} aria-label="Account menu">
          <Avatar src="/profile-photo.jpg" square />
        </DropdownButton>
        <DropdownMenu className="min-w-64" anchor="bottom end">
          <DropdownItem href="/my-profile">
            <UserIcon />
            <DropdownLabel>My profile</DropdownLabel>
          </DropdownItem>
          <DropdownItem href="/settings">
            <Cog8ToothIcon />
            <DropdownLabel>Settings</DropdownLabel>
          </DropdownItem>
          <DropdownDivider />
          <DropdownItem href="/privacy-policy">
            <ShieldCheckIcon />
            <DropdownLabel>Privacy policy</DropdownLabel>
          </DropdownItem>
          <DropdownItem href="/share-feedback">
            <LightBulbIcon />
            <DropdownLabel>Share feedback</DropdownLabel>
          </DropdownItem>
          <DropdownDivider />
          <DropdownItem href="/logout">
            <ArrowRightStartOnRectangleIcon />
            <DropdownLabel>Sign out</DropdownLabel>
          </DropdownItem>
        </DropdownMenu>
      </Dropdown>
    </Navbar>
  )
}
Make sure to provide an aria-label for assistive technology when using avatar-only dropdowns. See the Dropdown docs for more information on how to build a dropdown menu.

With mobile menu
If you'd like to add a mobile menu to a navbar, use the StackedLayout component which includes a navbar and a sidebar for mobile:

Stacked layout demoOpen in new tab
import { Avatar } from '@/components/avatar'
import {
  Dropdown,
  DropdownButton,
  DropdownDivider,
  DropdownItem,
  DropdownLabel,
  DropdownMenu,
} from '@/components/dropdown'
import { Navbar, NavbarDivider, NavbarItem, NavbarLabel, NavbarSection, NavbarSpacer } from '@/components/navbar'
import { Sidebar, SidebarBody, SidebarHeader, SidebarItem, SidebarLabel, SidebarSection } from '@/components/sidebar'
import { StackedLayout } from '@/components/stacked-layout'
import {
  ArrowRightStartOnRectangleIcon,
  ChevronDownIcon,
  Cog8ToothIcon,
  LightBulbIcon,
  PlusIcon,
  ShieldCheckIcon,
  UserIcon,
} from '@heroicons/react/16/solid'
import { InboxIcon, MagnifyingGlassIcon } from '@heroicons/react/20/solid'

const navItems = [
  { label: 'Home', url: '/' },
  { label: 'Events', url: '/events' },
  { label: 'Orders', url: '/orders' },
  { label: 'Broadcasts', url: '/broadcasts' },
  { label: 'Settings', url: '/settings' },
]

function TeamDropdownMenu() {
  return (
    <DropdownMenu className="min-w-80 lg:min-w-64" anchor="bottom start">
      <DropdownItem href="/teams/1/settings">
        <Cog8ToothIcon />
        <DropdownLabel>Settings</DropdownLabel>
      </DropdownItem>
      <DropdownDivider />
      <DropdownItem href="/teams/1">
        <Avatar slot="icon" src="/tailwind-logo.svg" />
        <DropdownLabel>Tailwind Labs</DropdownLabel>
      </DropdownItem>
      <DropdownItem href="/teams/2">
        <Avatar slot="icon" initials="WC" className="bg-purple-500 text-white" />
        <DropdownLabel>Workcation</DropdownLabel>
      </DropdownItem>
      <DropdownDivider />
      <DropdownItem href="/teams/create">
        <PlusIcon />
        <DropdownLabel>New team&hellip;</DropdownLabel>
      </DropdownItem>
    </DropdownMenu>
  )
}

function Example() {
  return (
    <StackedLayout
      navbar={
        <Navbar>
          <Dropdown>
            <DropdownButton as={NavbarItem} className="max-lg:hidden">
              <Avatar src="/tailwind-logo.svg" />
              <NavbarLabel>Tailwind Labs</NavbarLabel>
              <ChevronDownIcon />
            </DropdownButton>
            <TeamDropdownMenu />
          </Dropdown>
          <NavbarDivider className="max-lg:hidden" />
          <NavbarSection className="max-lg:hidden">
            {navItems.map(({ label, url }) => (
              <NavbarItem key={label} href={url}>
                {label}
              </NavbarItem>
            ))}
          </NavbarSection>
          <NavbarSpacer />
          <NavbarSection>
            <NavbarItem href="/search" aria-label="Search">
              <MagnifyingGlassIcon />
            </NavbarItem>
            <NavbarItem href="/inbox" aria-label="Inbox">
              <InboxIcon />
            </NavbarItem>
            <Dropdown>
              <DropdownButton as={NavbarItem}>
                <Avatar src="/profile-photo.jpg" square />
              </DropdownButton>
              <DropdownMenu className="min-w-64" anchor="bottom end">
                <DropdownItem href="/my-profile">
                  <UserIcon />
                  <DropdownLabel>My profile</DropdownLabel>
                </DropdownItem>
                <DropdownItem href="/settings">
                  <Cog8ToothIcon />
                  <DropdownLabel>Settings</DropdownLabel>
                </DropdownItem>
                <DropdownDivider />
                <DropdownItem href="/privacy-policy">
                  <ShieldCheckIcon />
                  <DropdownLabel>Privacy policy</DropdownLabel>
                </DropdownItem>
                <DropdownItem href="/share-feedback">
                  <LightBulbIcon />
                  <DropdownLabel>Share feedback</DropdownLabel>
                </DropdownItem>
                <DropdownDivider />
                <DropdownItem href="/logout">
                  <ArrowRightStartOnRectangleIcon />
                  <DropdownLabel>Sign out</DropdownLabel>
                </DropdownItem>
              </DropdownMenu>
            </Dropdown>
          </NavbarSection>
        </Navbar>
      }
      sidebar={
        <Sidebar>
          <SidebarHeader>
            <Dropdown>
              <DropdownButton as={SidebarItem} className="lg:mb-2.5">
                <Avatar src="/tailwind-logo.svg" />
                <SidebarLabel>Tailwind Labs</SidebarLabel>
                <ChevronDownIcon />
              </DropdownButton>
              <TeamDropdownMenu />
            </Dropdown>
          </SidebarHeader>
          <SidebarBody>
            <SidebarSection>
              {navItems.map(({ label, url }) => (
                <SidebarItem key={label} href={url}>
                  {label}
                </SidebarItem>
              ))}
            </SidebarSection>
          </SidebarBody>
        </Sidebar>
      }
    >
      {children}
    </StackedLayout>
  )
}
The Navbar component itself isn't opinionated about how it should be rendered at different breakpoints, which gives you total control over how it should adapt to different viewport sizes.

Hiding items on mobile
Use utility classes like max-lg:hidden to hide certain navbar items at different screen sizes:

Home
Events
Orders
import { Navbar, NavbarItem, NavbarSection } from '@/components/navbar'
import { Logo } from './logo'

function Example() {
  return (
    <Navbar>
      <Link href="/" aria-label="Home">
        <Logo className="size-10 sm:size-8" />
      </Link>
      <NavbarDivider className="max-lg:hidden" />
      <NavbarSection className="max-lg:hidden">
        <NavbarItem href="/">Home</NavbarItem>
        <NavbarItem href="/events">Events</NavbarItem>
        <NavbarItem href="/orders">Orders</NavbarItem>
      </NavbarSection>
    </Navbar>
  )
}
On this page
Component API
Examples
Basic example
With logo
With active state
With icon links
With space between items
With divider
With dropdown
With avatar dropdown
With mobile menu
Hiding items on mobile
Navbar - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Pagination
Because if anyone actually uses this app you're working on, your data isn't going to fit on a single page for long.

Previous
1
2
3
4
65
66
Next
import {
  Pagination,
  PaginationGap,
  PaginationList,
  PaginationNext,
  PaginationPage,
  PaginationPrevious,
} from '@/components/pagination'

function Example() {
  return (
    <Pagination>
      <PaginationPrevious href="?page=2" />
      <PaginationList>
        <PaginationPage href="?page=1">1</PaginationPage>
        <PaginationPage href="?page=2">2</PaginationPage>
        <PaginationPage href="?page=3" current>
          3
        </PaginationPage>
        <PaginationPage href="?page=4">4</PaginationPage>
        <PaginationGap />
        <PaginationPage href="?page=65">65</PaginationPage>
        <PaginationPage href="?page=66">66</PaginationPage>
      </PaginationList>
      <PaginationNext href="?page=4" />
    </Pagination>
  )
}
Component API
Prop	Default	Description
Pagination extends the JSX <nav> element
aria-label	Page navigation	The name to use when describing the pagination section for screen readers.
className	-	Any external layout classes to apply.
PaginationPrevious extends the JSX <a> element
href	-	The URL to the previous page. The link will be disabled when omitted.
children	Previous	The text to display in the link.
PaginationNext extends the JSX <a> element
href	-	The URL to the next page. The link will be disabled when omitted.
children	Next	The text to display in the link.
PaginationList
This component does not expose any component-specific props.
PaginationPage extends the JSX <a> element
href	-	The URL to the page.
children	-	The page number.
current	false	Whether or not it is the current page.
PaginationGap
This component does not expose any component-specific props.
Examples
Basic example
Use the Pagination, PaginationPrevious, PaginationList, PaginationPage, PaginationGap, and PaginationNext components to create a set of pagination links:

Previous
1
2
3
4
65
66
Next
import {
  Pagination,
  PaginationGap,
  PaginationList,
  PaginationNext,
  PaginationPage,
  PaginationPrevious,
} from '@/components/pagination'

function Example() {
  return (
    <Pagination>
      <PaginationPrevious href="?page=2" />
      <PaginationList>
        <PaginationPage href="?page=1">1</PaginationPage>
        <PaginationPage href="?page=2">2</PaginationPage>
        <PaginationPage href="?page=3" current>
          3
        </PaginationPage>
        <PaginationPage href="?page=4">4</PaginationPage>
        <PaginationGap />
        <PaginationPage href="?page=65">65</PaginationPage>
        <PaginationPage href="?page=66">66</PaginationPage>
      </PaginationList>
      <PaginationNext href="?page=4" />
    </Pagination>
  )
}
Disabling previous/next links
Omit the href prop on the PaginationPrevious or PaginationNext components to disable the previous/next links when on the first or last page:

Previous
1
2
3
4
65
66
Next
import {
  Pagination,
  PaginationGap,
  PaginationList,
  PaginationNext,
  PaginationPage,
  PaginationPrevious,
} from '@/components/pagination'

function Example() {
  return (
    <Pagination>
      <PaginationPrevious />
      <PaginationList>
        <PaginationPage href="?page=1" current>
          {'1'}
        </PaginationPage>
        <PaginationPage href="?page=2">2</PaginationPage>
        <PaginationPage href="?page=3">3</PaginationPage>
        <PaginationPage href="?page=4">4</PaginationPage>
        <PaginationGap />
        <PaginationPage href="?page=65">65</PaginationPage>
        <PaginationPage href="?page=66">66</PaginationPage>
      </PaginationList>
      <PaginationNext href="?page=2" />
    </Pagination>
  )
}
Current page active state
Use the current prop on the PaginationPage component to indicate the current page:

Previous
1
2
3
Next
import { Pagination, PaginationList, PaginationNext, PaginationPage, PaginationPrevious } from '@/components/pagination'

function Example() {
  return (
    <Pagination>
      <PaginationPrevious href="?page=1" />
      <PaginationList>
        <PaginationPage href="?page=1">1</PaginationPage>
        <PaginationPage href="?page=2" current>
          2
        </PaginationPage>
        <PaginationPage href="?page=3">3</PaginationPage>
      </PaginationList>
      <PaginationNext href="?page=3" />
    </Pagination>
  )
}
Without page links
Omit the PaginationList and PaginationPage components to render just the previous and next links:

Previous
Next
import { Pagination, PaginationNext, PaginationPrevious } from '@/components/pagination'

function Example() {
  return (
    <Pagination>
      <PaginationPrevious />
      <PaginationNext href="?after=421c1b0" />
    </Pagination>
  )
}
On this page
Component API
Examples
Basic example
Disabling previous/next links
Current page active state
Without page links
Pagination - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Radio
With multiple choice, you've always got a chance at getting the right answer.


Resale and transfers
Decide if people buy tickets from you or from scalpers.

Customers can resell or transfer their tickets if they can’t make it to the event.

Tickets cannot be resold or transferred to another person.

import { Description, Fieldset, Label, Legend } from '@/components/fieldset'
import { Radio, RadioField, RadioGroup } from '@/components/radio'
import { Text } from '@/components/text'

function Example() {
  return (
    <Fieldset>
      <Legend>Resale and transfers</Legend>
      <Text>Decide if people buy tickets from you or from scalpers.</Text>
      <RadioGroup name="resale" defaultValue="permit">
        <RadioField>
          <Radio value="permit" />
          <Label>Allow tickets to be resold</Label>
          <Description>Customers can resell or transfer their tickets if they can’t make it to the event.</Description>
        </RadioField>
        <RadioField>
          <Radio value="forbid" />
          <Label>Don’t allow tickets to be resold</Label>
          <Description>Tickets cannot be resold or transferred to another person.</Description>
        </RadioField>
      </RadioGroup>
    </Fieldset>
  )
}
Component API
Prop	Default	Description
RadioGroup extends the Headless UI <RadioGroup> component
disabled	false	Whether or not to disable the entire list.
name	-	The name to use when submitting an HTML form.
defaultValue	-	The initially selected value.
value	-	The controlled value of the radio group.
onChange	-	Handler to call when the state changes.
Radio extends the Headless UI <Radio> component
color	dark/zinc	The color variant the radio should use.
disabled	false	Whether or not to disable the radio.
value	-	The value to use when submitting an HTML form.
RadioField extends the Headless UI <Field> component
disabled	false	Whether or not to disable the entire field.
Label extends the Headless UI <Label> component
This component does not expose any component-specific props.
Description extends the Headless UI <Description> component
This component does not expose any component-specific props.
Examples
Basic example
Use the RadioGroup, RadioField, Radio, and Label components to create a simple radio group:

import { Label } from '@/components/fieldset'
import { Radio, RadioField, RadioGroup } from '@/components/radio'

function Example() {
  return (
    <RadioGroup name="resale" defaultValue="permit" aria-label="Resale and transfers">
      <RadioField>
        <Radio value="permit" />
        <Label>Allow tickets to be resold</Label>
      </RadioField>
      <RadioField>
        <Radio value="forbid" />
        <Label>Don’t allow tickets to be resold</Label>
      </RadioField>
    </RadioGroup>
  )
}
We recommend adding an aria-label for assistive technology, or connecting the RadioGroup to your own label using aria-labelledby.

With description
Use the RadioField, Label, and Description components to add a description below the radio:

Customers can resell or transfer their tickets if they can’t make it to the event.

Tickets cannot be resold or transferred to another person.

import { Description, Label } from '@/components/fieldset'
import { Radio, RadioField, RadioGroup } from '@/components/radio'

function Example() {
  return (
    <RadioGroup name="resale" defaultValue="permit" aria-label="Resale and transfers">
      <RadioField>
        <Radio value="permit" />
        <Label>Allow tickets to be resold</Label>
        <Description>Customers can resell or transfer their tickets if they can’t make it to the event.</Description>
      </RadioField>
      <RadioField>
        <Radio value="forbid" />
        <Label>Don’t allow tickets to be resold</Label>
        <Description>Tickets cannot be resold or transferred to another person.</Description>
      </RadioField>
    </RadioGroup>
  )
}
With custom layout
Use the Radio component with the unstyled components from @headlessui/react to implement custom layouts that still use the styled radio button:


How would you rate your experience?
import { Radio } from '@/components/radio'
import * as Headless from '@headlessui/react'

function Example() {
  return (
    <Headless.Fieldset>
      <Headless.Legend className="text-base/6 font-medium sm:text-sm/6">
        How would you rate your experience?
      </Headless.Legend>
      <Headless.RadioGroup name="rating" defaultValue={3} className="mt-4 flex gap-6 sm:gap-8">
        {[1, 2, 3, 4, 5].map((rating) => (
          <Headless.Field key={rating} className="flex items-center gap-2">
            <Radio value={rating} />
            <Headless.Label className="text-base/6 select-none sm:text-sm/6">{rating}</Headless.Label>
          </Headless.Field>
        ))}
      </Headless.RadioGroup>
    </Headless.Fieldset>
  )
}
Using the unstyled components from Headless UI will ensure important accessibility features are still handled for you like generating IDs and associating elements using aria-* attributes.

With accent color
Use the color prop to choose a different accent color for a checkbox:

import { Label } from '@/components/fieldset'
import { Radio, RadioField, RadioGroup } from '@/components/radio'

function Example() {
  return (
    <RadioGroup name="resale" defaultValue="permit" aria-label="Resale and transfers">
      <RadioField>
        <Radio color="sky" value="permit" />
        <Label>Allow tickets to be resold</Label>
      </RadioField>
      <RadioField>
        <Radio color="sky" value="forbid" />
        <Label>Don’t allow tickets to be resold</Label>
      </RadioField>
    </RadioGroup>
  )
}
For a full list of included color variants, check out the radio color reference.

Default selected state
Use the defaultValue prop to set the default selected option for a RadioGroup:

import { Label } from '@/components/fieldset'
import { Radio, RadioField, RadioGroup } from '@/components/radio'

function Example() {
  return (
    <RadioGroup name="resale" defaultValue="permit" aria-label="Resale and transfers">
      <RadioField>
        <Radio value="permit" />
        <Label>Allow tickets to be resold</Label>
      </RadioField>
      <RadioField>
        <Radio value="forbid" />
        <Label>Don’t allow tickets to be resold</Label>
      </RadioField>
    </RadioGroup>
  )
}
Controlled component
Use the value and onChange props to use a RadioGroup as a controlled component:

import { Label } from '@/components/fieldset'
import { Radio, RadioField, RadioGroup } from '@/components/radio'
import { useState } from 'react'

function Example() {
  let [selected, setSelected] = useState('permit')

  return (
    <RadioGroup value={selected} onChange={setSelected}>
      <RadioField>
        <Radio value="permit" />
        <Label>Allow tickets to be resold</Label>
      </RadioField>
      <RadioField>
        <Radio value="forbid" />
        <Label>Don’t allow tickets to be resold</Label>
      </RadioField>
    </RadioGroup>
  )
}
With fieldset
Use the Fieldset, Legend, and Text components to add a title and description to a radio group:


Resale and transfers
Decide if people buy tickets from you or from scalpers.

Customers can resell or transfer their tickets if they can’t make it to the event.

Tickets cannot be resold or transferred to another person.

import { Description, Fieldset, Label, Legend } from '@/components/fieldset'
import { Radio, RadioField, RadioGroup } from '@/components/radio'
import { Text } from '@/components/text'

function Example() {
  return (
    <Fieldset>
      <Legend>Resale and transfers</Legend>
      <Text>Decide if people buy tickets from you or from scalpers.</Text>
      <RadioGroup name="resale" defaultValue="permit">
        <RadioField>
          <Radio value="permit" />
          <Label>Allow tickets to be resold</Label>
          <Description>Customers can resell or transfer their tickets if they can’t make it to the event.</Description>
        </RadioField>
        <RadioField>
          <Radio value="forbid" />
          <Label>Don’t allow tickets to be resold</Label>
          <Description>Tickets cannot be resold or transferred to another person.</Description>
        </RadioField>
      </RadioGroup>
    </Fieldset>
  )
}
When used with a Fieldset and Legend, you don't need to add a separate aria-label to the RadioGroup itself.

Disabled state
Add the disabled prop to a Radio or RadioField component to disable it:


Resale and transfers
Decide if people buy tickets from you or from scalpers.

Customers can resell or transfer their tickets if they can’t make it to the event.

Tickets cannot be resold or transferred to another person.

import { Description, Fieldset, Label, Legend } from '@/components/fieldset'
import { Radio, RadioField, RadioGroup } from '@/components/radio'
import { Text } from '@/components/text'

function Example() {
  return (
    <Fieldset>
      <Legend>Resale and transfers</Legend>
      <Text>Decide if people buy tickets from you or from scalpers.</Text>
      <RadioGroup name="resale" defaultValue="permit">
        <RadioField>
          <Radio value="permit" />
          <Label>Allow tickets to be resold</Label>
          <Description>Customers can resell or transfer their tickets if they can’t make it to the event.</Description>
        </RadioField>
        <RadioField disabled>
          <Radio value="forbid" />
          <Label>Don’t allow tickets to be resold</Label>
          <Description>Tickets cannot be resold or transferred to another person.</Description>
        </RadioField>
      </RadioGroup>
    </Fieldset>
  )
}
You can also add the disabled prop to a RadioGroup or Fieldset to disable all of the radio buttons in that group.

Appendix
Color reference
By default, Catalyst includes two adaptive color variants that automatically change color between and dark modes to maintain a consistent level of contrast:

Color	Example
dark/zinc	
dark/white	
Catalyst also includes 20 solid colors that don't change outside of subtle global changes we make to all radios in dark mode:

Color	Example
dark	
zinc	
white	
red	
orange	
amber	
yellow	
lime	
green	
emerald	
teal	
cyan	
sky	
blue	
indigo	
violet	
purple	
fuchsia	
pink	
rose	
On this page
Component API
Examples
Basic example
With description
With custom layout
With accent color
Default selected state
Controlled component
With fieldset
Disabled state
Appendix
Color reference
Radio - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Select
Not a component I’d recommend using for a password field.


Active
import { Field, Label } from '@/components/fieldset'
import { Select } from '@/components/select'

function Example() {
  return (
    <Field>
      <Label>Project status</Label>
      <Select name="status">
        <option value="active">Active</option>
        <option value="paused">Paused</option>
        <option value="delayed">Delayed</option>
        <option value="canceled">Canceled</option>
      </Select>
    </Field>
  )
}
Component API
Prop	Default	Description
Select extends the Headless UI <Select> component
disabled	false	Whether or not to disable the select.
invalid	false	Whether or not the select has a validation error.
name	-	The name to use when submitting an HTML form.
defaultValue	-	The initial value for the select.
value	-	The controlled value of the select.
onChange	-	Handler to call when the select value changes.
Field extends the Headless UI <Field> component
disabled	false	Whether or not to disable the entire field.
Label extends the Headless UI <Label> component
This component does not expose any component-specific props.
Description extends the Headless UI <Description> component
This component does not expose any component-specific props.
ErrorMessage extends the Headless UI <Description> component
This component does not expose any component-specific props.
Examples
Basic example
Use the Select component on its own to render a standalone select without an associated Label component:


Active
import { Select } from '@/components/select'

function Example() {
  return (
    <Select aria-label="Project status" name="status">
      <option value="active">Active</option>
      <option value="paused">Paused</option>
      <option value="delayed">Delayed</option>
      <option value="canceled">Canceled</option>
    </Select>
  )
}
Make sure to provide an aria-label for assistive technology, or connect the Select to your own <label> element using an id.

With label
Wrap a Label and Select with the Field component to automatically associate them using a generated ID:


Active
import { Field, Label } from '@/components/fieldset'
import { Select } from '@/components/select'

function Example() {
  return (
    <Field>
      <Label>Project status</Label>
      <Select name="status">
        <option value="active">Active</option>
        <option value="paused">Paused</option>
        <option value="delayed">Delayed</option>
        <option value="canceled">Canceled</option>
      </Select>
    </Field>
  )
}
With description
Use the Description component to add a description above or below your Select:

This will be visible to clients on the project.


Active
import { Description, Field, Label } from '@/components/fieldset'
import { Select } from '@/components/select'

function Example() {
  return (
    <Field>
      <Label>Project status</Label>
      <Description>This will be visible to clients on the project.</Description>
      <Select name="status">
        <option value="active">Active</option>
        <option value="paused">Paused</option>
        <option value="delayed">Delayed</option>
        <option value="canceled">Canceled</option>
      </Select>
    </Field>
  )
}
Disabled state
Add the disabled prop to the Field component to disable a Select and the associated Label:


Active
import { Field, Label } from '@/components/fieldset'
import { Select } from '@/components/select'

function Example() {
  return (
    <Field disabled>
      <Label>Project status</Label>
      <Select name="status">
        <option value="active">Active</option>
        <option value="paused">Paused</option>
        <option value="delayed">Delayed</option>
        <option value="canceled">Canceled</option>
      </Select>
    </Field>
  )
}
You can also disable a select outside of a Field by adding the disabled prop directly to the Select itself.

Validation errors
Add the invalid prop to the Select component to indicate a validation error, and render the error using the ErrorMessage component:


Select a status…
A project status is required.

import { ErrorMessage, Field, Label } from '@/components/fieldset'
import { Select } from '@/components/select'

function Example({ errors }) {
  return (
    <Field>
      <Label>Project status</Label>
      <Select name="status" defaultValue="" invalid={errors.has('status')}>
        <option value="" disabled>
          Select a status&hellip;
        </option>
        <option value="active">Active</option>
        <option value="paused">Paused</option>
        <option value="delayed">Delayed</option>
        <option value="canceled">Canceled</option>
      </Select>
      {errors.has('status') && <ErrorMessage>{errors.get('status')}</ErrorMessage>}
    </Field>
  )
}
Constraining width
Use the className prop on the Select component to make layout adjustments like adjusting the max-width:


Monday
import { Field, Label } from '@/components/fieldset'
import { Select } from '@/components/select'

function Example() {
  return (
    <Field>
      <Label>Day of the week</Label>
      <Select className="max-w-40" name="day_of_the_week">
        <option>Monday</option>
        <option>Tuesday</option>
        <option>Wednesday</option>
        <option>Thursday</option>
        <option>Friday</option>
        <option>Saturday</option>
        <option>Sunday</option>
      </Select>
    </Field>
  )
}
Be aware that the className prop is a sharp knife — make sure to only add classes that don't conflict with classes the component already includes or you'll get unexpected results.

With custom layout
Use the unstyled Field component from @headlessui/react directly instead of the styled Field component to implement a custom layout:


Active
import { Label } from '@/components/fieldset'
import { Select } from '@/components/select'
import * as Headless from '@headlessui/react'

function Example() {
  return (
    <Headless.Field className="flex items-baseline justify-center gap-6">
      <Label>Project status</Label>
      <Select name="status" className="max-w-48">
        <option value="active">Active</option>
        <option value="paused">Paused</option>
        <option value="delayed">Delayed</option>
        <option value="canceled">Canceled</option>
      </Select>
    </Headless.Field>
  )
}
Using the unstyled Field component will ensure important accessibility features are still handled for you like generating IDs and associating elements using aria-* attributes.

Controlled component
Use the normal value and onChange props to use the Select component as a controlled component:


Active
import { Field, Label } from '@/components/fieldset'
import { Select } from '@/components/select'
import { useState } from 'react'

function Example() {
  let [status, setStatus] = useState('active')

  return (
    <Field>
      <Label>Project status</Label>
      <Select name="status" value={status} onChange={(e) => setStatus(e.target.value)}>
        <option value="active">Active</option>
        <option value="paused">Paused</option>
        <option value="delayed">Delayed</option>
        <option value="canceled">Canceled</option>
      </Select>
    </Field>
  )
}
On this page
Component API
Examples
Basic example
With label
With description
Disabled state
Validation errors
Constraining width
With custom layout
Controlled component
Select - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Sidebar
When you need to move from a horizontal nav to a sidebar, you know your app is all grown up.



Tailwind Labs
Search
Inbox
Home
Events
Orders
Broadcasts
Settings
Support
Changelog


Erica
erica@example.com
import { Avatar } from '@/components/avatar'
import {
  Dropdown,
  DropdownButton,
  DropdownDivider,
  DropdownItem,
  DropdownLabel,
  DropdownMenu,
} from '@/components/dropdown'
import {
  Sidebar,
  SidebarBody,
  SidebarFooter,
  SidebarHeader,
  SidebarItem,
  SidebarLabel,
  SidebarSection,
  SidebarSpacer,
} from '@/components/sidebar'
import {
  ArrowRightStartOnRectangleIcon,
  ChevronDownIcon,
  ChevronUpIcon,
  Cog8ToothIcon,
  LightBulbIcon,
  PlusIcon,
  ShieldCheckIcon,
  UserIcon,
} from '@heroicons/react/16/solid'
import {
  Cog6ToothIcon,
  HomeIcon,
  InboxIcon,
  MagnifyingGlassIcon,
  MegaphoneIcon,
  QuestionMarkCircleIcon,
  SparklesIcon,
  Square2StackIcon,
  TicketIcon,
} from '@heroicons/react/20/solid'

function Example() {
  return (
    <Sidebar>
      <SidebarHeader>
        <Dropdown>
          <DropdownButton as={SidebarItem} className="mb-2.5">
            <Avatar src="/tailwind-logo.svg" />
            <SidebarLabel>Tailwind Labs</SidebarLabel>
            <ChevronDownIcon />
          </DropdownButton>
          <DropdownMenu className="min-w-64" anchor="bottom start">
            <DropdownItem href="/teams/1/settings">
              <Cog8ToothIcon />
              <DropdownLabel>Settings</DropdownLabel>
            </DropdownItem>
            <DropdownDivider />
            <DropdownItem href="/teams/1">
              <Avatar slot="icon" src="/tailwind-logo.svg" />
              <DropdownLabel>Tailwind Labs</DropdownLabel>
            </DropdownItem>
            <DropdownItem href="/teams/2">
              <Avatar slot="icon" initials="WC" className="bg-purple-500 text-white" />
              <DropdownLabel>Workcation</DropdownLabel>
            </DropdownItem>
            <DropdownDivider />
            <DropdownItem href="/teams/create">
              <PlusIcon />
              <DropdownLabel>New team&hellip;</DropdownLabel>
            </DropdownItem>
          </DropdownMenu>
        </Dropdown>
        <SidebarSection>
          <SidebarItem href="/search">
            <MagnifyingGlassIcon />
            <SidebarLabel>Search</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/inbox">
            <InboxIcon />
            <SidebarLabel>Inbox</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarHeader>
      <SidebarBody>
        <SidebarSection>
          <SidebarItem href="/home">
            <HomeIcon />
            <SidebarLabel>Home</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/events">
            <Square2StackIcon />
            <SidebarLabel>Events</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/orders">
            <TicketIcon />
            <SidebarLabel>Orders</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/broadcasts">
            <MegaphoneIcon />
            <SidebarLabel>Broadcasts</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/settings">
            <Cog6ToothIcon />
            <SidebarLabel>Settings</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
        <SidebarSpacer />
        <SidebarSection>
          <SidebarItem href="/support">
            <QuestionMarkCircleIcon />
            <SidebarLabel>Support</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/changelog">
            <SparklesIcon />
            <SidebarLabel>Changelog</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarBody>
      <SidebarFooter>
        <Dropdown>
          <DropdownButton as={SidebarItem}>
            <span className="flex min-w-0 items-center gap-3">
              <Avatar src="/profile-photo.jpg" className="size-10" square alt="" />
              <span className="min-w-0">
                <span className="block truncate text-sm/5 font-medium text-zinc-950 dark:text-white">Erica</span>
                <span className="block truncate text-xs/5 font-normal text-zinc-500 dark:text-zinc-400">
                  erica@example.com
                </span>
              </span>
            </span>
            <ChevronUpIcon />
          </DropdownButton>
          <DropdownMenu className="min-w-64" anchor="top start">
            <DropdownItem href="/my-profile">
              <UserIcon />
              <DropdownLabel>My profile</DropdownLabel>
            </DropdownItem>
            <DropdownItem href="/settings">
              <Cog8ToothIcon />
              <DropdownLabel>Settings</DropdownLabel>
            </DropdownItem>
            <DropdownDivider />
            <DropdownItem href="/privacy-policy">
              <ShieldCheckIcon />
              <DropdownLabel>Privacy policy</DropdownLabel>
            </DropdownItem>
            <DropdownItem href="/share-feedback">
              <LightBulbIcon />
              <DropdownLabel>Share feedback</DropdownLabel>
            </DropdownItem>
            <DropdownDivider />
            <DropdownItem href="/logout">
              <ArrowRightStartOnRectangleIcon />
              <DropdownLabel>Sign out</DropdownLabel>
            </DropdownItem>
          </DropdownMenu>
        </Dropdown>
      </SidebarFooter>
    </Sidebar>
  )
}
Component API
Prop	Default	Description
Sidebar
This component does not expose any component-specific props.
SidebarHeader extends the JSX <div> element
This component does not expose any component-specific props.
SidebarBody extends the JSX <nav> element
This component does not expose any component-specific props.
SidebarFooter extends the JSX <div> element
This component does not expose any component-specific props.
SidebarSection extends the JSX <div> element
This component does not expose any component-specific props.
SidebarDivider extends the JSX <hr> element
This component does not expose any component-specific props.
SidebarSpacer extends the JSX <div> element
This component does not expose any component-specific props.
SidebarHeading extends the JSX <div> element
This component does not expose any component-specific props.
SidebarItem extends the Headless UI Button component or the Link component
current	-	Whether or not it is the current navigation item.
href	-	The target URL when using the button as a link.
SidebarLabel extends the JSX <span> element
This component does not expose any component-specific props.
Examples
Basic example
Use the Sidebar, SidebarBody, SidebarSection, and SidebarItem components to build a basic sidebar:

Home
Events
Orders
Broadcasts
Settings
import { Sidebar, SidebarBody, SidebarItem, SidebarSection } from '@/components/sidebar'

function Example() {
  return (
    <Sidebar>
      <SidebarBody>
        <SidebarSection>
          <SidebarItem href="/">Home</SidebarItem>
          <SidebarItem href="/events">Events</SidebarItem>
          <SidebarItem href="/orders">Orders</SidebarItem>
          <SidebarItem href="/broadcasts">Broadcasts</SidebarItem>
          <SidebarItem href="/settings">Settings</SidebarItem>
        </SidebarSection>
      </SidebarBody>
    </Sidebar>
  )
}
With logo
Add your own logo as an image or component to your sidebar, using utility classes to fine-tune the layout to suit your logo:

Home
Events
Orders
Broadcasts
Settings
import { Link } from '@/components/link'
import { Sidebar, SidebarBody, SidebarItem, SidebarSection } from '@/components/sidebar'
import { Logo } from './logo'

function Example() {
  return (
    <Sidebar>
      <SidebarBody>
        <div className="mb-2 flex">
          <Link href="#" aria-label="Home">
            <Logo />
          </Link>
        </div>
        <SidebarSection>
          <SidebarItem href="/">Home</SidebarItem>
          <SidebarItem href="/events">Events</SidebarItem>
          <SidebarItem href="/orders">Orders</SidebarItem>
          <SidebarItem href="/broadcasts">Broadcasts</SidebarItem>
          <SidebarItem href="/settings">Settings</SidebarItem>
        </SidebarSection>
      </SidebarBody>
    </Sidebar>
  )
}
With icons
Add an icon as the first child of a SidebarItem to render it next to the link text:

Home
Events
Orders
Broadcasts
Settings
import { Sidebar, SidebarBody, SidebarItem, SidebarLabel, SidebarSection } from '@/components/sidebar'
import { Cog6ToothIcon, HomeIcon, MegaphoneIcon, Square2StackIcon, TicketIcon } from '@heroicons/react/20/solid'

function Example() {
  return (
    <Sidebar>
      <SidebarBody>
        <SidebarSection>
          <SidebarItem href="/">
            <HomeIcon />
            <SidebarLabel>Home</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/events">
            <Square2StackIcon />
            <SidebarLabel>Events</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/orders">
            <TicketIcon />
            <SidebarLabel>Orders</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/broadcasts">
            <MegaphoneIcon />
            <SidebarLabel>Broadcasts</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/settings">
            <Cog6ToothIcon />
            <SidebarLabel>Settings</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarBody>
    </Sidebar>
  )
}
The SidebarItem component is designed to work best with 20×20 icons.

If you're using your own custom icons, make sure they include the data-slot="icon" prop so they receive the correct styles.

With active state
Use the current prop to specify which SidebarItem is the current navigation item:

Home
Events
Orders
Broadcasts
Settings
import { Sidebar, SidebarBody, SidebarItem, SidebarLabel, SidebarSection } from '@/components/sidebar'
import { Cog6ToothIcon, HomeIcon, MegaphoneIcon, Square2StackIcon, TicketIcon } from '@heroicons/react/20/solid'

function Example() {
  return (
    <Sidebar>
      <SidebarBody>
        <SidebarSection>
          <SidebarItem href="/" current>
            <HomeIcon />
            <SidebarLabel>Home</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/events">
            <Square2StackIcon />
            <SidebarLabel>Events</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/orders">
            <TicketIcon />
            <SidebarLabel>Orders</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/broadcasts">
            <MegaphoneIcon />
            <SidebarLabel>Broadcasts</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/settings">
            <Cog6ToothIcon />
            <SidebarLabel>Settings</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarBody>
    </Sidebar>
  )
}
With sticky header
Use the SidebarHeader component before the SidebarBody component to add a sticky header to the sidebar:

Search
Inbox
Home
Events
Orders
Broadcasts
Settings
import { Sidebar, SidebarBody, SidebarHeader, SidebarItem, SidebarLabel, SidebarSection } from '@/components/sidebar'
import {
  Cog6ToothIcon,
  HomeIcon,
  InboxIcon,
  MagnifyingGlassIcon,
  MegaphoneIcon,
  Square2StackIcon,
  TicketIcon,
} from '@heroicons/react/20/solid'

function Example() {
  return (
    <Sidebar>
      <SidebarHeader>
        <SidebarSection>
          <SidebarItem href="/search">
            <MagnifyingGlassIcon />
            <SidebarLabel>Search</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/inbox">
            <InboxIcon />
            <SidebarLabel>Inbox</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarHeader>
      <SidebarBody>
        <SidebarSection>
          <SidebarItem href="/">
            <HomeIcon />
            <SidebarLabel>Home</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/events">
            <Square2StackIcon />
            <SidebarLabel>Events</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/orders">
            <TicketIcon />
            <SidebarLabel>Orders</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/broadcasts">
            <MegaphoneIcon />
            <SidebarLabel>Broadcasts</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/settings">
            <Cog6ToothIcon />
            <SidebarLabel>Settings</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarBody>
    </Sidebar>
  )
}
With sticky footer
Use the SidebarFooter component after the SidebarBody component to add a sticky footer to the sidebar:

Home
Events
Orders
Broadcasts
Settings


Erica
import { Avatar } from '@/components/avatar'
import { Sidebar, SidebarBody, SidebarFooter, SidebarItem, SidebarLabel, SidebarSection } from '@/components/sidebar'
import { ChevronRightIcon } from '@heroicons/react/16/solid'
import { Cog6ToothIcon, HomeIcon, MegaphoneIcon, Square2StackIcon, TicketIcon } from '@heroicons/react/20/solid'

function Example() {
  return (
    <Sidebar>
      <SidebarBody>
        <SidebarSection>
          <SidebarItem href="/">
            <HomeIcon />
            <SidebarLabel>Home</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/events">
            <Square2StackIcon />
            <SidebarLabel>Events</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/orders">
            <TicketIcon />
            <SidebarLabel>Orders</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/broadcasts">
            <MegaphoneIcon />
            <SidebarLabel>Broadcasts</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/settings">
            <Cog6ToothIcon />
            <SidebarLabel>Settings</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarBody>
      <SidebarFooter>
        <SidebarSection>
          <SidebarItem>
            <Avatar src="/profile-photo.jpg" />
            <SidebarLabel>Erica</SidebarLabel>
            <ChevronRightIcon />
          </SidebarItem>
        </SidebarSection>
      </SidebarFooter>
    </Sidebar>
  )
}
With section headings
Use the SidebarHeading component to add a heading to a section:

Home
Events
Orders
Broadcasts
Settings
Resources
Support
Changelog
import { Sidebar, SidebarBody, SidebarHeading, SidebarItem, SidebarLabel, SidebarSection } from '@/components/sidebar'
import {
  Cog6ToothIcon,
  HomeIcon,
  MegaphoneIcon,
  QuestionMarkCircleIcon,
  SparklesIcon,
  Square2StackIcon,
  TicketIcon,
} from '@heroicons/react/20/solid'

function Example() {
  return (
    <Sidebar>
      <SidebarBody>
        <SidebarSection>
          <SidebarItem href="/">
            <HomeIcon />
            <SidebarLabel>Home</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/events">
            <Square2StackIcon />
            <SidebarLabel>Events</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/orders">
            <TicketIcon />
            <SidebarLabel>Orders</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/broadcasts">
            <MegaphoneIcon />
            <SidebarLabel>Broadcasts</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/settings">
            <Cog6ToothIcon />
            <SidebarLabel>Settings</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
        <SidebarSection>
          <SidebarHeading>Resources</SidebarHeading>
          <SidebarItem href="/resources">
            <QuestionMarkCircleIcon />
            <SidebarLabel>Support</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/changelog">
            <SparklesIcon />
            <SidebarLabel>Changelog</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarBody>
    </Sidebar>
  )
}
With space between sections
Use the SidebarSpacer component to space out sections in a sidebar:

Home
Events
Orders
Broadcasts
Settings
Sign out
import { Sidebar, SidebarBody, SidebarItem, SidebarLabel, SidebarSection, SidebarSpacer } from '@/components/sidebar'
import {
  ArrowRightStartOnRectangleIcon,
  Cog6ToothIcon,
  HomeIcon,
  MegaphoneIcon,
  Square2StackIcon,
  TicketIcon,
} from '@heroicons/react/20/solid'

function Example() {
  return (
    <Sidebar>
      <SidebarBody>
        <SidebarSection>
          <SidebarItem href="/">
            <HomeIcon />
            <SidebarLabel>Home</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/events">
            <Square2StackIcon />
            <SidebarLabel>Events</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/orders">
            <TicketIcon />
            <SidebarLabel>Orders</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/broadcasts">
            <MegaphoneIcon />
            <SidebarLabel>Broadcasts</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/settings">
            <Cog6ToothIcon />
            <SidebarLabel>Settings</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
        <SidebarSpacer />
        <SidebarSection>
          <SidebarItem href="/logout">
            <ArrowRightStartOnRectangleIcon />
            <SidebarLabel>Sign out</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarBody>
    </Sidebar>
  )
}
With divider
Use the SidebarDivider component to add a dividing line between sections in a sidebar:

Home
Events
Orders
Broadcasts
Settings
Support
Changelog
import { Sidebar, SidebarBody, SidebarDivider, SidebarItem, SidebarLabel, SidebarSection } from '@/components/sidebar'
import {
  Cog6ToothIcon,
  HomeIcon,
  MegaphoneIcon,
  QuestionMarkCircleIcon,
  SparklesIcon,
  Square2StackIcon,
  TicketIcon,
} from '@heroicons/react/20/solid'

function Example() {
  return (
    <Sidebar>
      <SidebarBody>
        <SidebarSection>
          <SidebarItem href="/">
            <HomeIcon />
            <SidebarLabel>Home</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/events">
            <Square2StackIcon />
            <SidebarLabel>Events</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/orders">
            <TicketIcon />
            <SidebarLabel>Orders</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/broadcasts">
            <MegaphoneIcon />
            <SidebarLabel>Broadcasts</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/settings">
            <Cog6ToothIcon />
            <SidebarLabel>Settings</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
        <SidebarDivider />
        <SidebarSection>
          <SidebarItem href="/support">
            <QuestionMarkCircleIcon />
            <SidebarLabel>Support</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/changelog">
            <SparklesIcon />
            <SidebarLabel>Changelog</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarBody>
    </Sidebar>
  )
}
With dropdown
Use the Dropdown component add a dropdown menu to a sidebar by rendering the DropdownButton as a SidebarItem:



Tailwind Labs
Home
Events
Orders
Broadcasts
Settings
import { Avatar } from '@/components/avatar'
import {
  Dropdown,
  DropdownButton,
  DropdownDivider,
  DropdownItem,
  DropdownLabel,
  DropdownMenu,
} from '@/components/dropdown'
import { Sidebar, SidebarBody, SidebarHeader, SidebarItem, SidebarLabel, SidebarSection } from '@/components/sidebar'
import { ChevronDownIcon, Cog8ToothIcon, PlusIcon } from '@heroicons/react/16/solid'
import { Cog6ToothIcon, HomeIcon, MegaphoneIcon, Square2StackIcon, TicketIcon } from '@heroicons/react/20/solid'

function Example() {
  return (
    <Sidebar>
      <SidebarHeader>
        <Dropdown>
          <DropdownButton as={SidebarItem}>
            <Avatar src="/tailwind-logo.svg" />
            <SidebarLabel>Tailwind Labs</SidebarLabel>
            <ChevronDownIcon />
          </DropdownButton>
          <DropdownMenu className="min-w-64" anchor="bottom start">
            <DropdownItem href="/teams/1/settings">
              <Cog8ToothIcon />
              <DropdownLabel>Settings</DropdownLabel>
            </DropdownItem>
            <DropdownDivider />
            <DropdownItem href="/teams/1">
              <Avatar slot="icon" src="/tailwind-logo.svg" />
              <DropdownLabel>Tailwind Labs</DropdownLabel>
            </DropdownItem>
            <DropdownItem href="/teams/2">
              <Avatar slot="icon" initials="WC" className="bg-purple-500 text-white" />
              <DropdownLabel>Workcation</DropdownLabel>
            </DropdownItem>
            <DropdownDivider />
            <DropdownItem href="/teams/create">
              <PlusIcon />
              <DropdownLabel>New team&hellip;</DropdownLabel>
            </DropdownItem>
          </DropdownMenu>
        </Dropdown>
      </SidebarHeader>
      <SidebarBody>
        <SidebarSection>
          <SidebarItem href="/">
            <HomeIcon />
            <SidebarLabel>Home</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/events">
            <Square2StackIcon />
            <SidebarLabel>Events</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/orders">
            <TicketIcon />
            <SidebarLabel>Orders</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/broadcasts">
            <MegaphoneIcon />
            <SidebarLabel>Broadcasts</SidebarLabel>
          </SidebarItem>
          <SidebarItem href="/settings">
            <Cog6ToothIcon />
            <SidebarLabel>Settings</SidebarLabel>
          </SidebarItem>
        </SidebarSection>
      </SidebarBody>
    </Sidebar>
  )
}
See the Dropdown docs for more information on building dropdown menus.

On this page
Component API
Examples
Basic example
With logo
With icons
With active state
With sticky header
With sticky footer
With section headings
With space between sections
With divider
With dropdown
Sidebar - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Switch
It's basically just a fancy checkbox, let's not kid ourselves.

Allow others to embed your event details on their own site.


import { Description, Label } from '@/components/fieldset'
import { Switch, SwitchField } from '@/components/switch'

function Example() {
  return (
    <SwitchField>
      <Label>Allow embedding</Label>
      <Description>Allow others to embed your event details on their own site.</Description>
      <Switch name="allow_embedding" defaultChecked />
    </SwitchField>
  )
}
Component API
Prop	Default	Description
Switch extends the Headless UI <Switch> component
color	dark/zinc	The color variant the switch should use.
disabled	false	Whether or not to disable the switch.
name	-	The name to use when submitting an HTML form.
value	-	The value to use when submitting an HTML form.
defaultChecked	-	The initial state of the switch.
checked	-	The controlled state of the switch.
onChange	-	Handler to call when the switch state changes.
SwitchField extends the Headless UI <Field> component
disabled	false	Whether or not to disable the entire field.
SwitchGroup extends the JSX <div> element
This component does not expose any component-specific props.
Label extends the Headless UI <Label> component
This component does not expose any component-specific props.
Description extends the Headless UI <Description> component
This component does not expose any component-specific props.
Examples
Basic example
Use the Switch component on its own to render a standalone switch without an associated Label component:


import { Switch } from '@/components/switch'

function Example() {
  return <Switch aria-label="Allow embedding" name="allow_embedding" />
}
Make sure to provide an aria-label for assistive technology, or connect the Switch to your own <label> element using an id.

With label
Wrap a Label and Switch with the SwitchField component to automatically associate them using a generated ID:


import { Label } from '@/components/fieldset'
import { Switch, SwitchField } from '@/components/switch'

function Example() {
  return (
    <SwitchField>
      <Label>Allow embedding</Label>
      <Switch name="allow_embedding" />
    </SwitchField>
  )
}
With description
Use the SwitchField, Label, and Description components to add a label and description to a switch:

Allow others to embed your event details on their own site.


import { Description, Label } from '@/components/fieldset'
import { Switch, SwitchField } from '@/components/switch'

function Example() {
  return (
    <SwitchField>
      <Label>Allow embedding</Label>
      <Description>Allow others to embed your event details on their own site.</Description>
      <Switch name="allow_embedding" />
    </SwitchField>
  )
}
With custom layout
Use the unstyled Field component from @headlessui/react directly instead of the styled SwitchField component to implement a custom layout:


import { Label } from '@/components/fieldset'
import { Switch } from '@/components/switch'
import * as Headless from '@headlessui/react'

function Example() {
  return (
    <Headless.Field className="flex items-center gap-4">
      <Switch name="allow_embedding" />
      <Label>Allow embedding</Label>
    </Headless.Field>
  )
}
Using the unstyled components from Headless UI will ensure important accessibility features are still handled for you like generating IDs and associating elements using aria-* attributes.

With accent color
Use the color prop to choose a different accent color for a switch:


import { Switch } from '@/components/switch'

function Example() {
  return <Switch color="sky" defaultChecked />
}
For a full list of included color variants, check out the switch color reference.

With custom value
Use the value prop to specify a custom value to use when submitting a form:


import { Switch } from '@/components/switch'

function Example() {
  return <Switch name="embed" value="allow" />
}
Default checked state
Use the defaultChecked prop to set the default state when using the Switch as an uncontrolled component:


import { Switch } from '@/components/switch'

function Example() {
  return <Switch defaultChecked />
}
Controlled component
Use the checked and onChange props to use a Switch as a controlled component:


import { Switch } from '@/components/switch'
import { useState } from 'react'

function Example() {
  let [checked, setChecked] = useState(true)

  return <Switch checked={checked} onChange={setChecked} />
}
Multiple switches
Use the SwitchGroup component to stack multiple switches together in a list:

Make this event visible on your profile.


Allow others to embed your event details on their own site.


import { Description, Label } from '@/components/fieldset'
import { Switch, SwitchField, SwitchGroup } from '@/components/switch'

function Example() {
  return (
    <SwitchGroup>
      <SwitchField>
        <Label>Show on events page</Label>
        <Description>Make this event visible on your profile.</Description>
        <Switch name="show_on_events_page" defaultChecked />
      </SwitchField>
      <SwitchField>
        <Label>Allow embedding</Label>
        <Description>Allow others to embed your event details on their own site.</Description>
        <Switch name="allow_embedding" />
      </SwitchField>
    </SwitchGroup>
  )
}
You can optionally add role="group" and an aria-label to the SwitchGroup if all of the switches are related and you want them announced to assistive technology as a group.

With fieldset
Use the Fieldset, Legend, and Text components to add a title and description to a group of switches:


Discoverability
Decide where your events can be found across the web.

Make this event visible on your profile.


Allow others to embed your event details on their own site.


import { Description, Fieldset, Label, Legend } from '@/components/fieldset'
import { Switch, SwitchField, SwitchGroup } from '@/components/switch'
import { Text } from '@/components/text'

function Example() {
  return (
    <Fieldset>
      <Legend>Discoverability</Legend>
      <Text>Decide where your events can be found across the web.</Text>
      <SwitchGroup>
        <SwitchField>
          <Label>Show on events page</Label>
          <Description>Make this event visible on your profile.</Description>
          <Switch name="show_on_events_page" defaultChecked />
        </SwitchField>
        <SwitchField>
          <Label>Allow embedding</Label>
          <Description>Allow others to embed your event details on their own site.</Description>
          <Switch name="allow_embedding" />
        </SwitchField>
      </SwitchGroup>
    </Fieldset>
  )
}
Disabled state
Add the disabled prop to a Switch or SwitchField component to disable it:


Discoverability
Decide where your events can be found across the web.

Make this event visible on your profile.


Allow others to embed your event details on their own site.


import { Description, Fieldset, Label, Legend } from '@/components/fieldset'
import { Switch, SwitchField, SwitchGroup } from '@/components/switch'
import { Text } from '@/components/text'

function Example() {
  return (
    <Fieldset>
      <Legend>Discoverability</Legend>
      <Text>Decide where your events can be found across the web.</Text>
      <SwitchGroup>
        <SwitchField>
          <Label>Show on events page</Label>
          <Description>Make this event visible on your profile.</Description>
          <Switch name="discoverability" value="show_on_events_page" />
        </SwitchField>
        <SwitchField disabled>
          <Label>Allow embedding</Label>
          <Description>Allow others to embed your event details on their own site.</Description>
          <Switch name="discoverability" value="allow_embedding" />
        </SwitchField>
      </SwitchGroup>
    </Fieldset>
  )
}
You can also add the disabled prop to a Fieldset to disable the entire fieldset.

Appendix
Color reference
By default, Catalyst includes two adaptive color variants that automatically change color between light and dark modes to maintain a consistent level of contrast:

Color	Example
dark/zinc	
dark/white	
Catalyst also includes 20 solid colors that don't change outside of subtle global changes we make to all switches in dark mode:

Color	Example
dark	
zinc	
white	
red	
orange	
amber	
yellow	
lime	
green	
emerald	
teal	
cyan	
sky	
blue	
indigo	
violet	
purple	
fuchsia	
pink	
rose	
On this page
Component API
Examples
Basic example
With label
With description
With custom layout
With accent color
With custom value
Default checked state
Controlled component
Multiple switches
With fieldset
Disabled state
Appendix
Color reference
Switch - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Table
If you can put it in a database, you can put it in a table.

Name	Email	Access
Leslie Alexander	leslie.alexander@example.com	Admin
Michael Foster	michael.foster@example.com	Owner
Dries Vincent	dries.vincent@example.com	Member
Lindsay Walton	lindsay.walton@example.com	Member
Courtney Henry	courtney.henry@example.com	Admin
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

function Example({ users }) {
  return (
    <Table>
      <TableHead>
        <TableRow>
          <TableHeader>Name</TableHeader>
          <TableHeader>Email</TableHeader>
          <TableHeader>Role</TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.handle}>
            <TableCell className="font-medium">{user.name}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell className="text-zinc-500">{user.access}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
Component API
Prop	Default	Description
Table extends the JSX <table> element
bleed	false	Whether the table should bleed into the gutter.
dense	false	Whether the table should use condensed spacing.
grid	false	Whether display vertical grid lines.
striped	false	Whether display striped table rows.
TableHead extends the JSX <thead> element
This component does not expose any component-specific props.
TableBody extends the JSX <tbody> element
This component does not expose any component-specific props.
TableRow extends the JSX <tr> element
href	-	The URL for the row when used as a link.
target	-	The target for the row when used as a link.
title	-	The title for the row whe used as a link.
TableHeader extends the JSX <th> element
This component does not expose any component-specific props.
TableCell extends the JSX <td> element
This component does not expose any component-specific props.
Examples
Basic example
Use the Table, TableHead, TableBody, TableRow, TableHeader, and TableCell components to build a table:

Name	Email	Access
Leslie Alexander	leslie.alexander@example.com	Admin
Michael Foster	michael.foster@example.com	Owner
Dries Vincent	dries.vincent@example.com	Member
Lindsay Walton	lindsay.walton@example.com	Member
Courtney Henry	courtney.henry@example.com	Admin
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

function Example({ users }) {
  return (
    <Table>
      <TableHead>
        <TableRow>
          <TableHeader>Name</TableHeader>
          <TableHeader>Email</TableHeader>
          <TableHeader>Role</TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.handle}>
            <TableCell className="font-medium">{user.name}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell className="text-zinc-500">{user.access}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
Responsive tables
Tables automatically become scrollable when they are wider than their container:

Name	Handle	Role	Email	Access
Leslie Alexander	@lesliealexander	Co-Founder / CEO	leslie.alexander@example.com	Admin
Michael Foster	@michaelfoster	Co-Founder / CTO	michael.foster@example.com	Owner
Dries Vincent	@driesvincent	Business Relations	dries.vincent@example.com	Member
Lindsay Walton	@lindsaywalton	Front-end Developer	lindsay.walton@example.com	Member
Courtney Henry	@courtneyhenry	Designer	courtney.henry@example.com	Admin
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

function Example({ users }) {
  return (
    <Table className="[--gutter:--spacing(6)] sm:[--gutter:--spacing(8)]">
      <TableHead>
        <TableRow>
          <TableHeader>Name</TableHeader>
          <TableHeader>Handle</TableHeader>
          <TableHeader>Role</TableHeader>
          <TableHeader>Email</TableHeader>
          <TableHeader>Access</TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.handle}>
            <TableCell className="font-medium">{user.name}</TableCell>
            <TableCell>@{user.handle}</TableCell>
            <TableCell>{user.role}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell className="text-zinc-500">{user.access}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
Set the CSS --gutter variable to match the padding of the containing element to make sure the table isn't cropped unnecessarily when it becomes scrollable. You can change the gutter responsively using media query variants, such as sm:[--gutter:--spacing(4)].

Full-width tables
Use the bleed prop and set the CSS --gutter variable to match the padding of the containing element to make a table full-width:

Name	Email	Access
Leslie Alexander	leslie.alexander@example.com	Admin
Michael Foster	michael.foster@example.com	Owner
Dries Vincent	dries.vincent@example.com	Member
Lindsay Walton	lindsay.walton@example.com	Member
Courtney Henry	courtney.henry@example.com	Admin
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

function Example({ users }) {
  return (
    <Table bleed className="[--gutter:--spacing(6)] sm:[--gutter:--spacing(8)]">
      <TableHead>
        <TableRow>
          <TableHeader>Name</TableHeader>
          <TableHeader>Email</TableHeader>
          <TableHeader>Role</TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.handle}>
            <TableCell className="font-medium">{user.name}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell className="text-zinc-500">{user.access}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
Full-width tables are still responsive and will become scrollable if they don't fit within the containing element.

Rows as links
Use the href prop on the TableRow component to treat an entire row like a link:

Name	Email	Access
Leslie Alexander	leslie.alexander@example.com	Admin
Michael Foster	michael.foster@example.com	Owner
Dries Vincent	dries.vincent@example.com	Member
Lindsay Walton	lindsay.walton@example.com	Member
Courtney Henry	courtney.henry@example.com	Admin
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

function Example({ users }) {
  return (
    <Table className="[--gutter:--spacing(6)] sm:[--gutter:--spacing(8)]">
      <TableHead>
        <TableRow>
          <TableHeader>Name</TableHeader>
          <TableHeader>Email</TableHeader>
          <TableHeader>Role</TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.handle} href={user.url}>
            <TableCell className="font-medium">{user.name}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell className="text-zinc-500">{user.access}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
When used as a link, TableRow also accepts the target and title props like a regular link.

With condensed spacing
Use the dense prop to render the table with condensed spacing:

Rank	Player	Pos	GP	G	A	P	+/-
1	Mitchell Marner	R	80	30	69	99	+18
2	William Nylander	R	82	40	47	87	+10
3	Auston Matthews	C	74	40	45	85	+31
4	John Tavares	C	80	36	44	80	-7
5	Michael Bunting	L	82	23	26	49	+21
6	Morgan Rielly	D	65	4	37	41	-9
7	Calle Jarnkrok	C	73	20	19	39	+9
8	Alex Kerfoot	C	82	10	22	32	+8
9	David Kampf	C	82	7	20	27	+6
10	Mark Giordano	D	78	4	20	24	+27
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

function Example({ players }) {
  return (
    <Table dense className="[--gutter:--spacing(6)] sm:[--gutter:--spacing(8)]">
      <TableHead>
        <TableRow>
          <TableHeader>Rank</TableHeader>
          <TableHeader>Player</TableHeader>
          <TableHeader className="text-right">Pos</TableHeader>
          <TableHeader className="text-right">GP</TableHeader>
          <TableHeader className="text-right">G</TableHeader>
          <TableHeader className="text-right">A</TableHeader>
          <TableHeader className="text-right">P</TableHeader>
          <TableHeader className="text-right">+/-</TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {players.map((player) => (
          <TableRow key={player.rank}>
            <TableCell className="tabular-nums">{player.rank}</TableCell>
            <TableCell className="font-medium">{player.name}</TableCell>
            <TableCell className="text-right">{player.position}</TableCell>
            <TableCell className="text-right tabular-nums">{player.gamesPlayed}</TableCell>
            <TableCell className="text-right tabular-nums">{player.goals}</TableCell>
            <TableCell className="text-right tabular-nums">{player.assists}</TableCell>
            <TableCell className="text-right tabular-nums">{player.points}</TableCell>
            <TableCell className="text-right tabular-nums">{player.plusMinus}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
With grid lines
Use the grid prop to render the table with vertical grid lines:

Name	Email	Access
Leslie Alexander	leslie.alexander@example.com	Admin
Michael Foster	michael.foster@example.com	Owner
Dries Vincent	dries.vincent@example.com	Member
Lindsay Walton	lindsay.walton@example.com	Member
Courtney Henry	courtney.henry@example.com	Admin
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

function Example({ users }) {
  return (
    <Table grid className="[--gutter:--spacing(6)] sm:[--gutter:--spacing(8)]">
      <TableHead>
        <TableRow>
          <TableHeader>Name</TableHeader>
          <TableHeader>Email</TableHeader>
          <TableHeader>Role</TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.handle}>
            <TableCell className="font-medium">{user.name}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell className="text-zinc-500">{user.access}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
With striped rows
Use the striped prop to render the table with striped rows and no horizontal borders:

Name	Email	Access
Leslie Alexander	leslie.alexander@example.com	Admin
Michael Foster	michael.foster@example.com	Owner
Dries Vincent	dries.vincent@example.com	Member
Lindsay Walton	lindsay.walton@example.com	Member
Courtney Henry	courtney.henry@example.com	Admin
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

function Example({ users }) {
  return (
    <Table striped className="[--gutter:--spacing(6)] sm:[--gutter:--spacing(8)]">
      <TableHead>
        <TableRow>
          <TableHeader>Name</TableHeader>
          <TableHeader>Email</TableHeader>
          <TableHeader>Role</TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.handle}>
            <TableCell className="font-medium">{user.name}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell className="text-zinc-500">{user.access}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
With different heading color
Use the text-{color} utilities on the TableRow component inside your TableHead to change the color of table headings:

Name	Email	Access
Leslie Alexander	leslie.alexander@example.com	Admin
Michael Foster	michael.foster@example.com	Owner
Dries Vincent	dries.vincent@example.com	Member
Lindsay Walton	lindsay.walton@example.com	Member
Courtney Henry	courtney.henry@example.com	Admin
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

function Example({ users }) {
  return (
    <Table className="[--gutter:--spacing(6)] sm:[--gutter:--spacing(8)]">
      <TableHead>
        <TableRow className="text-zinc-950 dark:text-white">
          <TableHeader>Name</TableHeader>
          <TableHeader>Email</TableHeader>
          <TableHeader>Role</TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.handle}>
            <TableCell className="font-medium">{user.name}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell className="text-zinc-500">{user.access}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
With complex content
Tables are unopinionated about their content and will adapt to just about anything you include:

Name	Role	Status

Leslie Alexander
leslie.alexander@example.com
Admin	Online

Michael Foster
michael.foster@example.com
Owner	Online

Dries Vincent
dries.vincent@example.com
Member	Offline

Lindsay Walton
lindsay.walton@example.com
Member	Online

Courtney Henry
courtney.henry@example.com
Admin	Online
import { Avatar } from '@/components/avatar'
import { Badge } from '@/components/badge'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

export function ComplexExample({ users }) {
  return (
    <Table className="[--gutter:--spacing(6)] sm:[--gutter:--spacing(8)]">
      <TableHead>
        <TableRow>
          <TableHeader>Name</TableHeader>
          <TableHeader>Role</TableHeader>
          <TableHeader>Status</TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.handle}>
            <TableCell>
              <div className="flex items-center gap-4">
                <Avatar src={user.avatarUrl} className="size-12" />
                <div>
                  <div className="font-medium">{user.name}</div>
                  <div className="text-zinc-500">
                    <a href="#" className="hover:text-zinc-700">
                      {user.email}
                    </a>
                  </div>
                </div>
              </div>
            </TableCell>
            <TableCell className="text-zinc-500">{user.access}</TableCell>
            <TableCell>
              {user.online ? <Badge color="lime">Online</Badge> : <Badge color="zinc">Offline</Badge>}
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
With pagination
Add a Pagination component below your table to add pagination controls:

Users
Name	Email	Access
Leslie Alexander	leslie.alexander@example.com	Admin
Michael Foster	michael.foster@example.com	Owner
Dries Vincent	dries.vincent@example.com	Member
Lindsay Walton	lindsay.walton@example.com	Member
Courtney Henry	courtney.henry@example.com	Admin
Previous
1
2
3
4
65
66
Next
import {
  Pagination,
  PaginationGap,
  PaginationList,
  PaginationNext,
  PaginationPage,
  PaginationPrevious,
} from '@/components/pagination'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'

function Example({ users }) {
  return (
    <>
      <h1 className="mb-6 text-base font-semibold">Users</h1>
      <Table>
        <TableHead>
          <TableRow>
            <TableHeader>Name</TableHeader>
            <TableHeader>Email</TableHeader>
            <TableHeader>Access</TableHeader>
          </TableRow>
        </TableHead>
        <TableBody>
          {users.map((user) => (
            <TableRow key={user.handle}>
              <TableCell className="font-medium">{user.name}</TableCell>
              <TableCell>{user.email}</TableCell>
              <TableCell className="text-zinc-500">{user.access}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
      <Pagination className="mt-6">
        <PaginationPrevious href="?page=2" />
        <PaginationList>
          <PaginationPage href="?page=1">1</PaginationPage>
          <PaginationPage href="?page=2">2</PaginationPage>
          <PaginationPage href="?page=3" current>
            3
          </PaginationPage>
          <PaginationPage href="?page=4">4</PaginationPage>
          <PaginationGap />
          <PaginationPage href="?page=65">65</PaginationPage>
          <PaginationPage href="?page=66">66</PaginationPage>
        </PaginationList>
        <PaginationNext href="?page=4" />
      </Pagination>
    </>
  )
}
Use the mt-* utilities to control the space between the table and the pagination controls.

With dropdowns
Use the Dropdown component within a TableCell to add a dropdown menu:

Name	Email	Access	Actions
Leslie Alexander	leslie.alexander@example.com	Admin	

Michael Foster	michael.foster@example.com	Owner	

Dries Vincent	dries.vincent@example.com	Member	

Lindsay Walton	lindsay.walton@example.com	Member	

Courtney Henry	courtney.henry@example.com	Admin	

import { Dropdown, DropdownButton, DropdownItem, DropdownMenu } from '@/components/dropdown'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'
import { EllipsisHorizontalIcon } from '@heroicons/react/16/solid'

function Example({ users }) {
  return (
    <Table className="[--gutter:--spacing(6)] sm:[--gutter:--spacing(8)]">
      <TableHead>
        <TableRow>
          <TableHeader>Name</TableHeader>
          <TableHeader>Email</TableHeader>
          <TableHeader>Access</TableHeader>
          <TableHeader className="relative w-0">
            <span className="sr-only">Actions</span>
          </TableHeader>
        </TableRow>
      </TableHead>
      <TableBody>
        {users.map((user) => (
          <TableRow key={user.handle}>
            <TableCell className="font-medium">{user.name}</TableCell>
            <TableCell>{user.email}</TableCell>
            <TableCell className="text-zinc-500">{user.access}</TableCell>
            <TableCell>
              <div className="-mx-3 -my-1.5 sm:-mx-2.5">
                <Dropdown>
                  <DropdownButton plain aria-label="More options">
                    <EllipsisHorizontalIcon />
                  </DropdownButton>
                  <DropdownMenu anchor="bottom end">
                    <DropdownItem>View</DropdownItem>
                    <DropdownItem>Edit</DropdownItem>
                    <DropdownItem>Delete</DropdownItem>
                  </DropdownMenu>
                </Dropdown>
              </div>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}
When adding elements like dropdowns to a table (especially with the plain style), consider using negative margins to avoid increasing the size of the table cell. For instance, in the example above we've added -my-1.5 to make sure the dropdown only takes up 24px of vertical space in the actual layout, which matches the height of the text in the other cells.

In dialog
Add a Table to your DialogBody component to include a table in a dialog:

Show users
import { Button } from '@/components/button'
import { Dialog, DialogActions, DialogBody, DialogDescription, DialogTitle } from '@/components/dialog'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/table'
import { useState } from 'react'

function Example({ users }) {
  let [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button type="button" onClick={() => setIsOpen(true)}>
        Show users
      </Button>
      <Dialog open={isOpen} onClose={setIsOpen} size="3xl">
        <DialogTitle>Users</DialogTitle>
        <DialogDescription>The follow users have access to your account.</DialogDescription>
        <DialogBody>
          <Table bleed compact>
            <TableHead>
              <TableRow>
                <TableHeader>Name</TableHeader>
                <TableHeader>Email</TableHeader>
                <TableHeader>Role</TableHeader>
              </TableRow>
            </TableHead>
            <TableBody>
              {users.map((user) => (
                <TableRow key={user.handle}>
                  <TableCell className="font-medium">{user.name}</TableCell>
                  <TableCell>{user.email}</TableCell>
                  <TableCell className="text-zinc-500">{user.access}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </DialogBody>
        <DialogActions>
          <Button onClick={() => setIsOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>
    </>
  )
}
When using tables within dialogs, the --gutter variable is automatically set to match the dialog's padding.

On this page
Component API
Examples
Basic example
Responsive tables
Full-width tables
Rows as links
With condensed spacing
With grid lines
With striped rows
With different heading color
With complex content
With pagination
With dropdowns
In dialog
Table - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Text
For all the lorem ipsum in your Figma designs that you're definitely going to replace with real copy before launch.

This feature is only available to users on the Business Plan.
To upgrade, visit your billing settings.

import { Strong, Text, TextLink } from '@/components/text'

function Example() {
  return (
    <Text>
      This feature is only available to users on the <Strong>Business Plan</Strong>. To upgrade, visit your{' '}
      <TextLink href="#">billing settings</TextLink>.
    </Text>
  )
}
Component API
Prop	Default	Description
Text extends the JSX <p> element
children	-	The text the component should render.
TextLink extends the <Link> component
href	-	The URL for the link.
children	-	The text the component should render.
Strong extends the JSX <strong> element
children	-	The text the component should render.
Code extends the JSX <code> element
children	-	The text the component should render.
Examples
Basic example
Use the Text component for any custom paragraph text that should match the style of the text built in to your other components:

Deleting your account is permanent, and your data will not be able to be recovered.

import { Text } from '@/components/text'

function Example() {
  return <Text>Deleting your account is permanent, and your data will not be able to be recovered.</Text>
}
Paragraphs using Text are responsive and automatically adapt to dark mode.

With link
Use the TextLink component for any links within a Text component:

Deleting your account is permanent, and your data will not be able to be recovered. If you still want to use this account in the future, learn about pausing your subscription instead.

import { Text, TextLink } from '@/components/text'

function Example() {
  return (
    <Text>
      Deleting your account is permanent, and your data will not be able to be recovered. If you still want to use this
      account in the future, learn about <TextLink href="#">pausing your subscription</TextLink> instead.
    </Text>
  )
}
With strong
Use the Strong component for any text you want to emphasize within a Text component:

Deleting your account is permanent, and your account data cannot be recovered.

import { Strong, Text } from '@/components/text'

function Example() {
  return (
    <Text>
      Deleting your account is permanent, and <Strong>your account data cannot be recovered</Strong>.
    </Text>
  )
}
With code
Use the Code component for any inline code symbols within a Text component:

Your new API token is BaVrRKpRMS_ndKU. Store this token somewhere safe as it will only be displayed once.

import { Code, Text } from '@/components/text'

function Example() {
  return (
    <Text>
      Your new API token is <Code>BaVrRKpRMS_ndKU</Code>. Store this token somewhere safe as it will only be displayed
      once.
    </Text>
  )
}
On this page
Component API
Examples
Basic example
With link
With strong
With code
Text - Catalyst UI Kit for Tailwind CSS

Demo
Docs
Buy UI Kit →

Getting started
Layouts
Sidebar layout
New
Stacked layout
New
Components
Alert
Avatar
Badge
Button
Checkbox
Description list
New
Dialog
Divider
New
Dropdown
Fieldset
Heading
New
Input
Listbox
Navbar
New
Pagination
Radio button
Select
Sidebar
New
Switch
Table
Text
Textarea
Textarea
For the times when you really just have a lot to say.

import { Field, Label } from '@/components/fieldset'
import { Textarea } from '@/components/textarea'

function Example() {
  return (
    <Field>
      <Label>Description</Label>
      <Textarea name="description" />
    </Field>
  )
}
Component API
Prop	Default	Description
Textarea extends the Headless UI <Textarea> component
disabled	false	Whether or not to disable the textarea.
invalid	false	Whether the textarea has a validation error.
resizable	true	Whether the textarea can be resized vertically.
name	-	The name to use when submitting an HTML form.
defaultValue	-	The initial value for the textarea.
value	-	The controlled value of the textarea.
onChange	-	Handler to call when the textarea value changes.
rows	-	The number of visible lines in the textarea.
Field extends the Headless UI <Field> component
disabled	false	Whether or not to disable the entire field.
Label extends the Headless UI <Label> component
This component does not expose any component-specific props.
Description extends the Headless UI <Description> component
This component does not expose any component-specific props.
ErrorMessage extends the Headless UI <Description> component
This component does not expose any component-specific props.
Examples
Basic example
Use the Textarea component on its own to render a standalone textarea without an associated Label component:

import { Textarea } from '@/components/textarea'

function Example() {
  return <Textarea aria-label="Description" name="description" />
}
Make sure to provide an aria-label for assistive technology, or connect the Textarea to your own <label> element using an id.

With label
Wrap a Label and Textarea with the Field component to automatically associate them using a generated ID:

import { Field, Label } from '@/components/fieldset'
import { Textarea } from '@/components/textarea'

function Example() {
  return (
    <Field>
      <Label>Description</Label>
      <Textarea name="description" />
    </Field>
  )
}
With description
Use the Description component to add a description above or below your Textarea:

This will be shown under the product title.

import { Description, Field, Label } from '@/components/fieldset'
import { Textarea } from '@/components/textarea'

function Example() {
  return (
    <Field>
      <Label>Description</Label>
      <Description>This will be shown under the product title.</Description>
      <Textarea name="name" />
    </Field>
  )
}
Disabled state
Add the disabled prop to the Field component to disable an Textarea and the associated Label:

import { Field, Label } from '@/components/fieldset'
import { Textarea } from '@/components/textarea'

function Example() {
  return (
    <Field disabled>
      <Label>Description</Label>
      <Textarea name="description" />
    </Field>
  )
}
You can also disable a textarea outside of a Field by adding the disabled prop directly to the Textarea itself.

Validation errors
Add the invalid prop to the Field component to indicate a validation error, and render the error using the ErrorMessage component:

This field is required.

import { ErrorMessage, Field, Label } from '@/components/fieldset'
import { Textarea } from '@/components/textarea'

function Example({ errors }) {
  return (
    <Field>
      <Label>Description</Label>
      <Textarea name="description" invalid={errors.has('description')} />
      {errors.has('description') && <ErrorMessage>{errors.get('description')}</ErrorMessage>}
    </Field>
  )
}
With custom layout
Use the unstyled Field component from @headlessui/react directly instead of the styled Field component to implement a custom layout:

This will be shown under the product title.

import { Description, Label } from '@/components/fieldset'
import { Textarea } from '@/components/textarea'
import * as Headless from '@headlessui/react'

function Example() {
  return (
    <Headless.Field className="grid grid-cols-12 gap-6">
      <div className="col-span-5">
        <Label>Description</Label>
        <Description className="mt-1">This will be shown under the product title.</Description>
      </div>
      <div className="col-span-7">
        <Textarea name="description" rows="3" />
      </div>
    </Headless.Field>
  )
}
Using the unstyled Field component will ensure important accessibility features are still handled for you like generating IDs and associating elements using aria-* attributes.

Controlled component
Use the normal value and onChange props to use the Textarea component as a controlled component:

import { Field, Label } from '@/components/fieldset'
import { Textarea } from '@/components/textarea'
import { useState } from 'react'

function Example() {
  let [name, setName] = useState('')

  return (
    <Field>
      <Label>Description</Label>
      <Textarea name="description" value={name} onChange={(e) => setName(e.target.value)} />
    </Field>
  )
}
On this page
Component API
Examples
Basic example
With label
With description
Disabled state
Validation errors
With custom layout
Controlled component
Textarea - Catalyst UI Kit for Tailwind CSS

